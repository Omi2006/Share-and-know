{"version":3,"sources":["components/Auth/fetchCsrf.js","components/General/LoggedInContext.js","components/Auth/Register.js","components/Auth/Login.js","components/General/SideBarContent.js","components/General/Navbar.js","components/General/Footer.js","components/Post/Comment.js","components/Post/CommentList.js","components/Post/CommentForm.js","components/Post/Like.js","components/Post/Post.js","components/Post/New.js","components/Post/Row.js","components/Post/List.js","components/Pagination.js","components/Home.js","App.js","serviceWorker.js","index.js","images/undraw_share_online_r87b.svg","images/undraw_Login_re_4vu2.svg"],"names":["getCookie","name","document","cookie","token","split","map","c","trim","filter","startsWith","length","decodeURIComponent","fetchCsrf","url","body","method","a","fetch","mode","credentials","headers","Accept","JSON","stringify","response","json","result","LoginContext","React","createContext","LoginProvider","Provider","Register","useForm","handleSubmit","errors","register","watch","handleLogin","useContext","LoggedInContext","submitButton","useRef","useState","message","setMessage","onSubmit","data","current","disabled","username","password","confirm","email","type","content","Object","keys","Row","style","margin","Col","md","src","ShareImage","alt","width","padding","UncontrolledAlert","color","toggle","maxWidth","placeholder","ref","required","className","aria-label","marginTop","marginBottom","validate","value","Login","submitInput","height","loginImage","minWidth","to","SidebarContent","loggedIn","logout","alert","Nav","vertical","NavItem","icon","faHome","faPlus","onClick","faSignOutAlt","faSignInAlt","faUser","SidebarNav","props","collapsed","setCollapsed","localStorage","getItem","theme","setTheme","useEffect","setItem","documentElement","setAttribute","sidebar","open","onSetOpen","styles","backgroundColor","zIndex","overlay","faBars","faSun","faMoon","children","Footer","Comment","comment","editCommentContent","setContent","editing","setEditing","editComment","id","Card","CardHeader","display","justifyContent","commenter","CardText","date","Button","size","outline","marginLeft","maxLength","CardBody","tag","CommentList","comments","key","CommentForm","reset","formData","post","setComments","prevComments","error","console","log","Alert","Form","FormGroup","Label","for","LikeButton","usernames","likes","user","handleLike","uuid","setLikes","faHeart","includes","title","Post","useParams","setPost","getPost","poster","fontSize","Spinner","PostForm","redirect","setRedirect","href","target","rel","rows","CardTitle","CardSubtitle","CardFooter","PostList","CardDeck","posts","results","toString","Paginate","Pagination","PaginationItem","currentPage","PaginationLink","previous","setCurrentPage","numRange","number","active","slice","next","Home","setPosts","setNumRange","getPosts","newRange","total","Set","textAlign","App","setLoggedIn","getUser","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.5d5c4ca7.chunk.js","sourcesContent":["function getCookie(name) {\r\n    if (!document.cookie) {\r\n        return null;\r\n    }\r\n    const token = document.cookie\r\n        .split(\";\")\r\n        .map(c => c.trim())\r\n        .filter(c => c.startsWith(name + \"=\"));\r\n\r\n    if (token.length === 0) {\r\n        return null;\r\n    }\r\n    return decodeURIComponent(token[0].split(\"=\")[1]);\r\n}\r\n\r\nexport async function fetchCsrf(url, body, method) {\r\n    const response = await fetch(url, {\r\n        method: method,\r\n        mode: \"same-origin\",\r\n        credentials: \"include\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n","import React from 'react';\r\n\r\nconst LoginContext = React.createContext({});\r\nexport const LoginProvider = LoginContext.Provider;\r\n\r\nexport default LoginContext;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { useForm } from 'react-hook-form';\r\nimport LoggedInContext from '../General/LoggedInContext';\r\nimport { Col, UncontrolledAlert, Row } from 'reactstrap';\r\n\r\nimport ShareImage from '../../images/undraw_share_online_r87b.svg';\r\nimport '../../style/auth.css';\r\n\r\nexport default function Register() {\r\n    const { handleSubmit, errors, register, watch } = useForm();\r\n    const { handleLogin } = useContext(LoggedInContext);\r\n    const submitButton = useRef();\r\n    const [message, setMessage] = useState({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        if (\r\n            data.username.length <= 0 ||\r\n            data.password.length <= 0 ||\r\n            data.confirm.length <= 0 ||\r\n            data.email.length <= 0\r\n        ) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            return false;\r\n        } else if (data.password !== data.confirm) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'Password and confirm fields must match!',\r\n            });\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/register', data, 'POST');\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px' }}>\r\n            <Col md=\"12\">\r\n                <h4>Welcome! Register to interact with other users.</h4>\r\n                <img\r\n                    src={ShareImage}\r\n                    alt=\"Share online\"\r\n                    style={{ width: '40vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    style={{\r\n                        padding: '10px',\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                    }}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"form-control input\"\r\n                        name=\"email\"\r\n                        aria-label=\"email\"\r\n                        ref={register({ required: true })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.email && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the email!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value === watch('confirm'),\r\n                        })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            {errors.password.type === 'required'\r\n                                ? 'Remember to fill out the username!'\r\n                                : 'Password and confirm fields must match!'}\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        className=\"form-control input\"\r\n                        name=\"confirm\"\r\n                        ref={register({ required: true })}\r\n                        aria-label=\"confirm\"\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.confirm && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the confirm password!\r\n                        </p>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Register\"\r\n                        aria-label=\"register\"\r\n                        ref={submitButton}\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useState, useContext, useRef } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { Link } from 'react-router-dom';\r\nimport LoggedInContext from '../General/LoggedInContext';\r\nimport { UncontrolledAlert, Row, Col } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport loginImage from '../../images/undraw_Login_re_4vu2.svg';\r\n\r\nexport default function Login() {\r\n    const [message, setMessage] = useState({});\r\n    const submitInput = useRef();\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const { handleLogin } = useContext(LoggedInContext);\r\n\r\n    const onSubmit = async data => {\r\n        submitInput.current.disabled = true;\r\n        if (data.username.length <= 0 || data.password.length <= 0) {\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/login', data, 'POST');\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        submitInput.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px', height: '100%' }}>\r\n            <Col md=\"12\">\r\n                <h4>\r\n                    Welcome back! Login to start interacting with other users\r\n                </h4>\r\n                <img\r\n                    src={loginImage}\r\n                    alt=\"login\"\r\n                    style={{ width: '50vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    style={{\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                        minWidth: '0px',\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the password!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Login\"\r\n                        ref={submitInput}\r\n                        aria-label=\"register\"\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                    <footer>\r\n                        <small>\r\n                            Don't have an account? Register{' '}\r\n                            <Link to=\"/register\">here</Link>\r\n                        </small>\r\n                    </footer>\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport LoggedInContext from './LoggedInContext';\r\nimport { Nav, NavItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../../style/navbar.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHome,\r\n    faPlus,\r\n    faSignInAlt,\r\n    faSignOutAlt,\r\n    faUser,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function SidebarContent() {\r\n    const { handleLogin, loggedIn } = useContext(LoggedInContext);\r\n\r\n    const logout = async () => {\r\n        const response = await fetch('/knowledge/logout');\r\n        const result = await response.json();\r\n        if (result.errors) {\r\n            alert('An error has occured');\r\n            return;\r\n        }\r\n        handleLogin(null);\r\n    };\r\n\r\n    return (\r\n        <Nav vertical className=\"navnav\">\r\n            <h3>Share</h3>\r\n            <hr />\r\n            <NavItem>\r\n                <Link to=\"/\" className=\"nav-link navnavlink\">\r\n                    <FontAwesomeIcon icon={faHome} className=\"navnavitem\" />\r\n                    <p className=\"navnavtext\">Home</p>\r\n                </Link>\r\n            </NavItem>\r\n            {loggedIn ? (\r\n                <>\r\n                    <NavItem>\r\n                        <Link to=\"/new/post\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faPlus}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">New post</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <button\r\n                            onClick={logout}\r\n                            className=\"navnavbutton navnavlink\"\r\n                            style={{ margin: '0px', width: '140.547px' }}\r\n                        >\r\n                            <FontAwesomeIcon\r\n                                icon={faSignOutAlt}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Logout</p>\r\n                        </button>\r\n                    </NavItem>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <NavItem>\r\n                        <Link to=\"/login\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faSignInAlt}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Login</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <Link to=\"/register\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faUser}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Register</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                </>\r\n            )}\r\n        </Nav>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Sidebar from 'react-sidebar';\r\nimport SideBarContent from './SideBarContent';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './../../style/navbar.css';\r\n\r\nexport default function SidebarNav(props) {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [theme, setTheme] = useState(localStorage.getItem('theme'));\r\n\r\n    const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', theme);\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n    }, [theme]);\r\n\r\n    return (\r\n        <Sidebar\r\n            sidebar={<SideBarContent />}\r\n            open={!collapsed}\r\n            onSetOpen={toggleNavbar}\r\n            styles={{\r\n                sidebar: { backgroundColor: '#0bf1c0', zIndex: '101' },\r\n                overlay: { backgroundColor: 'rgb(0, 0, 0, 0.13)' },\r\n            }}\r\n        >\r\n            <div className=\"navnavbar\">\r\n                <button\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={() => setCollapsed(false)}\r\n                    className=\"navnavbutton\"\r\n                >\r\n                    <FontAwesomeIcon icon={faBars} />\r\n                </button>\r\n                <button\r\n                    className=\"theme navnavbutton\"\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={() =>\r\n                        setTheme(theme === 'dark' ? 'light' : 'dark')\r\n                    }\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"theme\"\r\n                        icon={theme === 'dark' ? faSun : faMoon}\r\n                    />\r\n                </button>\r\n            </div>\r\n            {props.children}\r\n        </Sidebar>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div className=\"footer-main-div\">\r\n            <h4>Footer</h4>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { Card, CardHeader, CardText, CardBody, Button } from 'reactstrap';\r\nimport LoginContext from '../General/LoggedInContext';\r\nimport TextArea from 'react-autosize-textarea';\r\nimport Markdown from 'react-markdown';\r\n\r\nimport '../../style/post.css';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\n\r\nexport default function Comment({ comment }) {\r\n    const { loggedIn } = useContext(LoginContext);\r\n    const editCommentContent = useRef();\r\n    const [content, setContent] = useState(comment.content);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const editComment = async () => {\r\n        if (editCommentContent.current) {\r\n            const { value } = editCommentContent.current;\r\n            if (value.length > 256) {\r\n                alert('Comment must be less than 256 characters long');\r\n                return;\r\n            }\r\n            setContent(value);\r\n            const result = await fetchCsrf(\r\n                `/knowledge/comment/${comment.id}`,\r\n                { content: value },\r\n                'PUT'\r\n            );\r\n            if (result.errors) {\r\n                alert(result.errors[Object.keys(result.errors)[0]]);\r\n            }\r\n        }\r\n        setEditing(!editing);\r\n    };\r\n    return (\r\n        <Card style={{ margin: '20px' }}>\r\n            <CardHeader\r\n                style={{\r\n                    backgroundColor: 'rgb(203, 223, 230)',\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <div>\r\n                    <h4>@{comment.commenter.username}</h4>\r\n                    <CardText className=\"text-muted\">{comment.date}</CardText>\r\n                </div>\r\n                {comment.commenter.username === loggedIn && (\r\n                    <div>\r\n                        {editing && (\r\n                            <Button\r\n                                color=\"danger\"\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => setEditing(false)}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            color=\"success\"\r\n                            size=\"sm\"\r\n                            style={{ marginLeft: '10px' }}\r\n                            maxLength=\"256\"\r\n                            outline\r\n                            onClick={() => editComment()}\r\n                        >\r\n                            {editing ? 'Save' : 'Edit'}\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </CardHeader>\r\n            <CardBody style={{ backgroundColor: 'rgb(215, 245, 255)' }}>\r\n                {editing ? (\r\n                    <TextArea className=\"edit-comment\" ref={editCommentContent}>\r\n                        {content}\r\n                    </TextArea>\r\n                ) : (\r\n                    <CardText tag=\"pre\">\r\n                        <Markdown>{content}</Markdown>\r\n                    </CardText>\r\n                )}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default function CommentList(props) {\r\n    return (\r\n        <div>\r\n            {props.comments.map(comment => {\r\n                return <Comment key={comment.id} comment={comment} />;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Form, FormGroup, Label, UncontrolledAlert, Alert } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function CommentForm(props) {\r\n    const { register, handleSubmit, reset, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const submitButton = useRef();\r\n\r\n    const onSubmit = async data => {\r\n        //Disable button to prevent submitting twice\r\n        submitButton.current.disabled = true;\r\n\r\n        if (data.content.length < 1) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'You must fill out the comment!',\r\n            });\r\n            submitButton.current.disabled = false;\r\n            return;\r\n        }\r\n        const formData = {\r\n            content: data.content,\r\n            post: props.post,\r\n        };\r\n        const result = await fetchCsrf('/knowledge/comment', formData, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n        } else {\r\n            setMessage({\r\n                type: 'success',\r\n                content: 'Comment posted successfully.',\r\n            });\r\n            reset();\r\n        }\r\n        submitButton.current.disabled = false;\r\n        //Add comment to comment lists\r\n        try {\r\n            props.setComments(prevComments => [\r\n                result.comment,\r\n                ...prevComments,\r\n            ]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            {errors.content && (\r\n                <UncontrolledAlert color=\"danger\">\r\n                    {errors.content.type === 'required'\r\n                        ? 'You must fill out the comment!'\r\n                        : 'Comment must be under 256 characters!'}\r\n                </UncontrolledAlert>\r\n            )}\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content</Label>\r\n                    <TextArea\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 256,\r\n                        })}\r\n                        placeholder=\"A valuable comment...\"\r\n                        id=\"content\"\r\n                        name=\"content\"\r\n                        aria-label=\"Comment content\"\r\n                        className=\"form-control\"\r\n                    />\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Share your comment\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport LoginContext from '../General/LoggedInContext';\r\n\r\nexport default function LikeButton(props) {\r\n    const { loggedIn } = useContext(LoginContext);\r\n    const usernames = props.likes.map(user => user.username);\r\n\r\n    const handleLike = async () => {\r\n        const result = await fetchCsrf(\r\n            `knowledge/post/${props.uuid}`,\r\n            {\r\n                likes: loggedIn,\r\n            },\r\n            'PUT'\r\n        );\r\n        if (result.errors) {\r\n            alert('An error has occured. Try again later.');\r\n        } else {\r\n            props.setLikes(result.likes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn && (\r\n                <button onClick={handleLike} className=\"like-button\">\r\n                    <FontAwesomeIcon\r\n                        icon={faHeart}\r\n                        style={{\r\n                            color: usernames.includes(loggedIn)\r\n                                ? 'red'\r\n                                : 'grey',\r\n                        }}\r\n                        title=\"like button\"\r\n                    />\r\n                </button>\r\n            )}\r\n            <p>{props.likes.length}</p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Alert, Spinner } from 'reactstrap';\r\nimport Markdown from 'react-markdown';\r\nimport CommentList from './CommentList';\r\nimport CommentForm from './CommentForm';\r\nimport LoggedInContext from '../General/LoggedInContext';\r\nimport LikeButton from './Like';\r\n\r\nimport '../../style/post.css';\r\n\r\nexport default function Post() {\r\n    const { uuid } = useParams();\r\n    const [post, setPost] = useState({});\r\n    const [likes, setLikes] = useState();\r\n    const [comments, setComments] = useState(post.comments);\r\n    const { loggedIn } = useContext(LoggedInContext);\r\n    useEffect(() => {\r\n        //get the post and set the comments\r\n        const getPost = async () => {\r\n            const response = await fetch(`knowledge/post/${uuid}`);\r\n            const result = await response.json();\r\n            setPost(result);\r\n            setLikes(result.likes);\r\n            setComments(result.comments);\r\n        };\r\n        getPost();\r\n    }, [uuid]);\r\n    return !post.content ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ padding: '10px' }}>\r\n            <div>\r\n                <h6>{post.poster.username}</h6>\r\n                {likes && (\r\n                    <LikeButton\r\n                        setLikes={setLikes}\r\n                        likes={likes}\r\n                        uuid={post.uuid}\r\n                    />\r\n                )}\r\n                <footer style={{ fontSize: '12px' }} className=\"text-muted\">\r\n                    {post.date}\r\n                </footer>\r\n                <h2 id=\"post-title\">{post.title}</h2>\r\n            </div>\r\n            <hr />\r\n            <div style={{ maxWidth: '1024px', margin: 'auto' }}>\r\n                <div id=\"post-div\">\r\n                    <Markdown>{post.content}</Markdown>\r\n                </div>\r\n                <hr />\r\n                {loggedIn ? (\r\n                    <CommentForm post={post.id} setComments={setComments} />\r\n                ) : (\r\n                    <Alert color=\"danger\">\r\n                        You must be logged in to comment!\r\n                    </Alert>\r\n                )}\r\n                <hr />\r\n                {comments && <CommentList comments={comments} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FormGroup, Form, Label, Alert } from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function PostForm() {\r\n    const [redirect, setRedirect] = useState(false);\r\n    const submitButton = useRef();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        const result = await fetchCsrf('/knowledge/new/post', data, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = true;\r\n        setRedirect(true);\r\n    };\r\n\r\n    return redirect ? (\r\n        <Redirect to=\"/\" />\r\n    ) : (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            <Form\r\n                style={{ margin: '10px' }}\r\n                method=\"POST\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n                <h6>\r\n                    In here you make a new post. The content will be rendered\r\n                    using markdown.{' '}\r\n                    <a\r\n                        href=\"https://www.markdowntutorial.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        What is markdown and how to use it.\r\n                    </a>\r\n                </h6>\r\n                <FormGroup>\r\n                    <Label for=\"title\">Title: </Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        aria-label=\"title\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Title...\"\r\n                        className=\"form-control\"\r\n                        ref={register({ required: true })}\r\n                    />\r\n                    {errors.title && (\r\n                        <p className=\"error-message\">\r\n                            You must provide a title!\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content: </Label>\r\n                    <TextArea\r\n                        type=\"text\"\r\n                        aria-label=\"content\"\r\n                        name=\"content\"\r\n                        id=\"content\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Some good content...\"\r\n                        ref={register({ required: true })}\r\n                        rows={20}\r\n                        maxLength=\"2050\"\r\n                    />\r\n                    {errors.content && (\r\n                        <p className=\"error-message\">\r\n                            You must provide some content!\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Create post\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    CardSubtitle,\r\n    Col,\r\n    CardHeader,\r\n    CardFooter,\r\n    Spinner,\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../../style/post.css';\r\n\r\nexport default function Row({ post }) {\r\n    return !post ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <Col md=\"4\" style={{ marginBottom: '30px' }}>\r\n            <Card style={{ margin: '0px' }}>\r\n                <CardHeader style={{ backgroundColor: '#68d8ee' }}>\r\n                    <CardTitle>\r\n                        <h5>{post.title}</h5>\r\n                    </CardTitle>\r\n                    <CardSubtitle>By: {post.poster.username}</CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody className=\"back-blue\">\r\n                    <CardText className=\"post-content\">{post.content}</CardText>\r\n                </CardBody>\r\n                <CardFooter className=\"footer back-blue\">\r\n                    <p className=\"card-link\">\r\n                        <Link to={`posts/${post.uuid}`}>See more</Link>\r\n                    </p>\r\n                    <CardText className=\"text-muted\">{post.date}</CardText>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from './Row';\r\nimport { CardDeck } from 'reactstrap';\r\n\r\nexport default function PostList(props) {\r\n    return (\r\n        <CardDeck\r\n            style={{\r\n                padding: '10px',\r\n                width: '100%',\r\n                justifyContent: 'space-evenly',\r\n            }}\r\n        >\r\n            {props.posts.results.map(post => {\r\n                return <Row post={post} key={post.id.toString()} />;\r\n            })}\r\n        </CardDeck>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PaginationItem, PaginationLink, Pagination } from 'reactstrap';\r\n\r\nexport default function Paginate(props) {\r\n    return (\r\n        <Pagination style={{ justifyContent: 'center' }}>\r\n            {/* Make sure current page isn't the first to disable it */}\r\n            <PaginationItem disabled={props.currentPage === 1} key=\"prev\">\r\n                <PaginationLink\r\n                    previous\r\n                    onClick={() => props.setCurrentPage(props.currentPage - 1)}\r\n                />\r\n            </PaginationItem>\r\n\r\n            {props.numRange.map(number => {\r\n                return (\r\n                    <PaginationItem\r\n                        active={number === props.currentPage}\r\n                        key={number.toString()}\r\n                    >\r\n                        <PaginationLink\r\n                            onClick={() => props.setCurrentPage(number)}\r\n                        >\r\n                            {number}\r\n                        </PaginationLink>\r\n                    </PaginationItem>\r\n                );\r\n            })}\r\n            {/* Make sure current page isn't the last to disable it */}\r\n            <PaginationItem\r\n                disabled={props.currentPage === props.numRange.slice(-1)[0]}\r\n                key=\"next\"\r\n            >\r\n                <PaginationLink\r\n                    next\r\n                    onClick={() => props.setCurrentPage(props.currentPage + 1)}\r\n                />\r\n            </PaginationItem>\r\n        </Pagination>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport PostList from './Post/List';\r\nimport { Spinner } from 'reactstrap';\r\nimport Pagination from './Pagination';\r\n\r\nexport default function Home() {\r\n    const [posts, setPosts] = useState({});\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [numRange, setNumRange] = useState([]);\r\n\r\n    //get the posts for a page\r\n    useEffect(() => {\r\n        const getPosts = async () => {\r\n            const response = await fetch(`knowledge/posts?page=${currentPage}`);\r\n            const result = await response.json();\r\n            setPosts(result);\r\n        };\r\n        getPosts();\r\n    }, [currentPage]);\r\n\r\n    //generate the pagination number ranges\r\n    useEffect(() => {\r\n        //If posts is undefined, don't run this part\r\n        if (!posts.results) {\r\n            return () => {};\r\n        }\r\n        //Change the numrange when the posts change\r\n        const newRange = [1, currentPage, posts.total];\r\n        setNumRange([...new Set(newRange)]);\r\n    }, [posts, currentPage]);\r\n\r\n    return !posts.results ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div>\r\n            <h3 style={{ textAlign: 'center' }}>Home</h3>\r\n            <PostList posts={posts} />\r\n            <Pagination\r\n                currentPage={currentPage}\r\n                numRange={numRange}\r\n                setCurrentPage={setCurrentPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Redirect, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport Register from './components/Auth/Register';\nimport Login from './components/Auth/Login';\nimport Sidebar from './components/General/Navbar';\nimport Footer from './components/General/Footer';\nimport Post from './components/Post/Post';\nimport PostForm from './components/Post/New';\nimport Home from './components/Home';\nimport { LoginProvider } from './components/General/LoggedInContext';\n\nexport default function App() {\n    const [loggedIn, setLoggedIn] = useState(null);\n\n    useEffect(() => {\n        const getUser = async () => {\n            const response = await fetch('/knowledge/login');\n            const { user } = await response.json();\n            setLoggedIn(user);\n        };\n        getUser();\n    }, [loggedIn]);\n\n    return (\n        <Router>\n            <LoginProvider\n                value={{ loggedIn: loggedIn, handleLogin: setLoggedIn }}\n            >\n                <Sidebar>\n                    <div className=\"App\" style={{ marginTop: '65px' }}>\n                        <Route path=\"/\" exact component={Home} />\n                        <Route\n                            path=\"/register\"\n                            exact\n                            component={() =>\n                                loggedIn ? <Redirect to=\"/\" /> : <Register />\n                            }\n                        />\n                        <Route\n                            path=\"/login\"\n                            exact\n                            component={() =>\n                                loggedIn ? <Redirect to=\"/\" /> : <Login />\n                            }\n                        />\n                        <Route\n                            path=\"/new/post\"\n                            exact\n                            component={() =>\n                                loggedIn ? (\n                                    <PostForm />\n                                ) : (\n                                    <Redirect to=\"/login\" />\n                                )\n                            }\n                        />\n                        <Route path=\"/posts/:uuid\" exact component={Post} />\n                        <Footer />\n                    </div>\n                </Sidebar>\n            </LoginProvider>\n        </Router>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_share_online_r87b.fbd5ff07.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_Login_re_4vu2.303e4a67.svg\";"],"sourceRoot":""}