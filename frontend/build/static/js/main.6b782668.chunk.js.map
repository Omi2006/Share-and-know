{"version":3,"sources":["components/Auth/fetchCsrf.js","components/Auth/LoggedInContext.js","components/Auth/Login.js","components/Auth/Register.js","components/Auth/ToggleLoginContext.js","components/General/Dropdown.js","components/General/Search.js","components/General/Sidebar.js","components/General/SidebarContent.js","components/General/usePrefersReducedMotion.js","components/Post/Like.js","components/Post/List.js","components/Post/New.js","components/Comment/Comment.js","components/Comment/List.js","components/Comment/New.js","components/Post/Post.js","components/Post/Row.js","components/Pagination.js","components/Hub/Hub.js","components/Hub/HubList.js","components/Hub/HubPath.js","components/Hub/Row.js","components/Hub/ToggleButton.js","components/Hub/New.js","components/Home.js","App.js","serviceWorker.js","index.js","images/undraw_Login_re_4vu2.svg","images/undraw_share_online_r87b.svg"],"names":["getCookie","name","document","cookie","token","split","map","c","trim","filter","startsWith","length","decodeURIComponent","fetchCsrf","url","body","method","a","fetch","mode","credentials","headers","Accept","JSON","stringify","response","json","result","LoggedInContext","React","createContext","LoggedInProvider","Provider","Login","useState","message","setMessage","submitInput","useRef","useForm","register","errors","handleSubmit","handleLogin","useContext","ToggleLoggedInContext","onSubmit","data","current","disabled","username","password","type","content","Object","keys","Row","style","margin","height","Col","md","src","loginImage","alt","width","padding","Alert","color","toggle","maxWidth","minWidth","placeholder","ref","required","className","aria-label","value","to","Register","watch","submitButton","confirm","email","ShareImage","marginTop","marginBottom","validate","ToggleLoggedInProvider","Radio","options","setSortBy","selected","isToggled","setIsToggled","prefersReducedMotion","usePrefersReducedMotion","toggleDropdown","menubg","useSpring","background","y","immediate","menuAppear","transform","opacity","config","gentle","button","data-testid","onClick","p","interpolate","div","wobbly","option","handleSetOption","key","Search","setSearch","setCurrentPage","Form","search","paddingBottom","Label","for","id","Sidebar","children","collapsed","setCollapsed","localStorage","getItem","theme","setTheme","toggleSidebar","useEffect","setItem","documentElement","setAttribute","icon","faBars","faSun","faMoon","SidebarContent","undefined","AnimatedNav","animated","Nav","loggedIn","navigate","useNavigate","logout","alert","goToRoute","route","routes","faHome","push","faPlus","faSignOutAlt","faSignInAlt","faUser","vertical","NavItem","getInitialState","window","matchMedia","matches","setPrefersReducedMotion","mediaQueryList","addEventListener","event","removeEventListener","LikeButton","likes","uuid","setLikes","usernames","user","handleLike","faHeart","title","includes","Badge","pill","AnimatedDeck","CardDeck","PostList","posts","deckStyles","from","post","PostForm","pathname","useLocation","hubs","href","target","rel","FormGroup","rows","maxLength","Comment","comment","LoggedinContext","editCommentContent","setContent","editing","setEditing","toggleEditing","editComment","Card","CardHeader","backgroundColor","display","justifyContent","commenter","CardText","date","Button","fontSize","outline","faWindowClose","marginLeft","faSave","faEdit","CardBody","whiteSpcae","List","comments","page","setPage","slice","commentList","setCommentList","transition","useTransition","enter","pageYOffset","prevCommentList","scroll","top","item","props","overflow","New","setComments","reset","formData","prevComments","error","UncontrolledAlert","Post","useParams","setPost","getPost","poster","hub","full_path","state","Spinner","CardTitle","CardSubtitle","CardFooter","faArrowCircleRight","Paginate","currentPage","last","Pagination","PaginationItem","PaginationLink","previous","Set","number","active","toString","next","Hub","setHub","sortBy","isLoading","setIsLoading","items","setItems","setType","pathlist","getHub","getItems","Jumbotron","paddingTop","whiteSpace","replace","description","ToggleButton","handleTypeChange","results","total","HubList","HubPath","hubPath","setHubPath","newHubPath","splice","path","Breadcrumb","index","BreadcrumbItem","join","molasses","friction","borderColor","span","charAt","toUpperCase","NewHub","console","log","textAlign","toLowerCase","Home","setPosts","getPosts","App","setLoggedIn","getUser","element","Hubs","HubRoutes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.6b782668.chunk.js","sourcesContent":["function getCookie(name) {\r\n    if (!document.cookie) {\r\n        return null;\r\n    }\r\n    const token = document.cookie\r\n        .split(\";\")\r\n        .map(c => c.trim())\r\n        .filter(c => c.startsWith(name + \"=\"));\r\n\r\n    if (token.length === 0) {\r\n        return null;\r\n    }\r\n    return decodeURIComponent(token[0].split(\"=\")[1]);\r\n}\r\n\r\nexport async function fetchCsrf(url, body, method) {\r\n    const response = await fetch(url, {\r\n        method: method,\r\n        mode: \"same-origin\",\r\n        credentials: \"include\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n","import React from 'react';\r\n\r\nconst LoggedInContext = React.createContext({});\r\nexport const LoggedInProvider = LoggedInContext.Provider;\r\n\r\nexport default LoggedInContext;\r\n","import React, { useState, useContext, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Alert, Row, Col } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ToggleLoggedInContext, fetchCsrf } from './';\r\nimport loginImage from '../../images/undraw_Login_re_4vu2.svg';\r\nimport '../../style/auth.css';\r\n\r\nexport default function Login() {\r\n    const [message, setMessage] = useState({});\r\n    const submitInput = useRef();\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedInContext);\r\n\r\n    const toggleMessage = () => setMessage({});\r\n\r\n    const onSubmit = async data => {\r\n        submitInput.current.disabled = true;\r\n        if (data.username.length <= 0 || data.password.length <= 0) {\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/login', data, 'POST');\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        submitInput.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px', height: '100%' }}>\r\n            <Col md=\"12\">\r\n                <h4>\r\n                    Welcome back! Login to start interacting with other users\r\n                </h4>\r\n                <img\r\n                    src={loginImage}\r\n                    alt=\"login\"\r\n                    style={{ width: '50vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <Alert color={message.type} toggle={toggleMessage}>\r\n                        {message.content}\r\n                    </Alert>\r\n                )}\r\n                <form\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    style={{\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                        minWidth: '0px',\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the password!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Login\"\r\n                        ref={submitInput}\r\n                        aria-label=\"login\"\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                    <footer>\r\n                        <small>\r\n                            Don't have an account? Register{' '}\r\n                            <Link to=\"/register\">here</Link>\r\n                        </small>\r\n                    </footer>\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ToggleLoggedInContext, fetchCsrf } from './';\r\nimport { Col, Alert, Row } from 'reactstrap';\r\n\r\nimport ShareImage from '../../images/undraw_share_online_r87b.svg';\r\nimport '../../style/auth.css';\r\n\r\nexport default function Register() {\r\n    const { handleSubmit, errors, register, watch } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedInContext);\r\n    const submitButton = useRef();\r\n    const [message, setMessage] = useState({});\r\n\r\n    const toggleMessage = () => setMessage({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        if (\r\n            data.username.length <= 0 ||\r\n            data.password.length <= 0 ||\r\n            data.confirm.length <= 0 ||\r\n            data.email.length <= 0\r\n        ) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            return false;\r\n        } else if (data.password !== data.confirm) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'Password and confirm fields must match!',\r\n            });\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/register', data, 'POST');\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px' }}>\r\n            <Col md=\"12\">\r\n                <h4>Welcome! Register to interact with other users.</h4>\r\n                <img\r\n                    src={ShareImage}\r\n                    alt=\"Share online\"\r\n                    style={{ width: '40vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <Alert color={message.type} toggle={toggleMessage}>\r\n                        {message.content}\r\n                    </Alert>\r\n                )}\r\n                <form\r\n                    style={{\r\n                        padding: '10px',\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                    }}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"form-control input\"\r\n                        name=\"email\"\r\n                        aria-label=\"email\"\r\n                        ref={register({ required: true })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.email && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the email!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value === watch('confirm'),\r\n                        })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            {errors.password.type === 'required'\r\n                                ? 'Remember to fill out the password!'\r\n                                : 'Password and confirm fields must match!'}\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        className=\"form-control input\"\r\n                        name=\"confirm\"\r\n                        ref={register({ required: true })}\r\n                        aria-label=\"confirm\"\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.confirm && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the confirm password!\r\n                        </p>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Register\"\r\n                        aria-label=\"register\"\r\n                        ref={submitButton}\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst ToggleLoggedInContext = React.createContext({});\r\nexport const ToggleLoggedInProvider = ToggleLoggedInContext.Provider;\r\n\r\nexport default ToggleLoggedInContext;\r\n","import React, { useState } from 'react';\r\nimport { useSpring, animated, config } from 'react-spring';\r\nimport { usePrefersReducedMotion } from './';\r\nimport '../../style/dropdown.css';\r\n\r\nexport default function Radio({ options, setSortBy, selected }) {\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n    const toggleDropdown = () => setIsToggled(!isToggled);\r\n\r\n    const menubg = useSpring({ background: isToggled ? '#68d8ee' : '#8ee4f5' });\r\n    const { y } = useSpring({\r\n        y: isToggled ? 180 : 0,\r\n        immediate: prefersReducedMotion,\r\n    });\r\n    const menuAppear = useSpring({\r\n        transform: isToggled ? 'translateY(0)' : 'translateY(-40px)',\r\n        opacity: isToggled ? 1 : 0,\r\n        config: config.gentle,\r\n        immediate: prefersReducedMotion,\r\n    });\r\n\r\n    const handleSetOption = option => {\r\n        //Wait for items to disappear before toggle\r\n        setSortBy(option);\r\n        toggleDropdown();\r\n    };\r\n\r\n    return (\r\n        <div className=\"radio-container\">\r\n            <animated.button\r\n                style={menubg}\r\n                data-testid=\"toggle\"\r\n                className=\"radio-wrapper\"\r\n                onClick={toggleDropdown}\r\n            >\r\n                <div className=\"radio\">\r\n                    <p className=\"visually-hidden\">Change sort options</p>\r\n                    <p>{selected}</p>\r\n                    <animated.p\r\n                        style={{\r\n                            transform: y.interpolate(y => `rotateX(${y}deg)`),\r\n                        }}\r\n                    >\r\n                        {isToggled ? 'X' : '▼'}\r\n                    </animated.p>\r\n                </div>\r\n            </animated.button>\r\n            <animated.div style={menuAppear} config={config.wobbly}>\r\n                {isToggled && (\r\n                    <div className=\"radio-content\">\r\n                        {options.map(option => (\r\n                            <div\r\n                                onClick={() => handleSetOption(option)}\r\n                                key={option[0]}\r\n                            >\r\n                                <button>{option[1]}</button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport { Form, Label } from 'reactstrap';\r\n\r\nexport default function Search({ setSearch, type, setCurrentPage }) {\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        setSearch(data.search);\r\n        //Set the current page to avoid errors if the pages count is less than the current page\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            style={{ padding: '20px 2rem', paddingBottom: '0px' }}\r\n        >\r\n            <Label for=\"search\">Find specific {type}</Label>\r\n            <input\r\n                className=\"form-control\"\r\n                placeholder=\"What do you want to search for?\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                ref={register}\r\n                style={{ marginBottom: '15px' }}\r\n            />\r\n            <input className=\"btn btn-primary\" value=\"Search\" type=\"submit\" />\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { SidebarContent, usePrefersReducedMotion } from './';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSpring } from 'react-spring';\r\nimport './../../style/navbar.css';\r\n\r\nexport default function Sidebar({ children }) {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [theme, setTheme] = useState(localStorage.getItem('theme'));\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n\r\n    const content = useSpring({\r\n        opacity: !collapsed ? 1 : 0,\r\n        transform: !collapsed\r\n            ? 'translate3D(0%, 0, 0)'\r\n            : 'translate3D(-100%, 0, 0)',\r\n        immediate: prefersReducedMotion,\r\n    });\r\n\r\n    const toggleTheme = () => setTheme(theme === 'dark' ? 'light' : 'dark');\r\n\r\n    const toggleSidebar = () => {\r\n        setCollapsed(!collapsed);\r\n    };\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', theme);\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n    }, [theme]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"navnavbar\">\r\n                <button\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={toggleSidebar}\r\n                    className=\"navnavicon\"\r\n                >\r\n                    <FontAwesomeIcon icon={faBars} />\r\n                    <span className=\"visually-hidden\">Toggle sidebar</span>\r\n                </button>\r\n                <button\r\n                    className=\"theme navnavicon\"\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={toggleTheme}\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"theme\"\r\n                        icon={theme === 'dark' ? faSun : faMoon}\r\n                    />\r\n                </button>\r\n            </div>\r\n            <SidebarContent toggleSidebar={toggleSidebar} style={content} />\r\n            <div\r\n                style={{ filter: !collapsed && 'blur(5px)' }}\r\n                onClick={!collapsed ? toggleSidebar : undefined}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Nav, NavItem } from 'reactstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHome,\r\n    faPlus,\r\n    faSignInAlt,\r\n    faSignOutAlt,\r\n    faUser,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { ToggleLoggedInContext, LoggedInContext } from '../Auth';\r\nimport { animated } from 'react-spring';\r\nimport '../../style/navbar.css';\r\n\r\nconst AnimatedNav = animated(Nav);\r\n\r\nexport default function SidebarContent({ toggleSidebar, style }) {\r\n    const loggedIn = useContext(LoggedInContext);\r\n    const handleLogin = useContext(ToggleLoggedInContext);\r\n    const navigate = useNavigate();\r\n\r\n    const logout = async () => {\r\n        const response = await fetch('/knowledge/logout');\r\n        const result = await response.json();\r\n        if (result.errors) {\r\n            alert('An error has occured');\r\n            return;\r\n        }\r\n        alert('Logged out successfully!');\r\n        handleLogin(null);\r\n        toggleSidebar();\r\n    };\r\n\r\n    const goToRoute = route => {\r\n        navigate(route);\r\n        toggleSidebar();\r\n    };\r\n\r\n    //Generate the routes based on whether the user is logged in or not\r\n    const routes = [\r\n        {\r\n            onClick: () => goToRoute('/'),\r\n            icon: faHome,\r\n            name: 'Home',\r\n        },\r\n    ];\r\n    loggedIn\r\n        ? routes.push(\r\n              {\r\n                  onClick: () => goToRoute('/new/post'),\r\n                  icon: faPlus,\r\n                  name: 'New post',\r\n              },\r\n              {\r\n                  onClick: logout,\r\n                  icon: faSignOutAlt,\r\n                  name: 'Logout',\r\n              }\r\n          )\r\n        : routes.push(\r\n              {\r\n                  onClick: () => goToRoute('/login'),\r\n                  icon: faSignInAlt,\r\n                  name: 'Login',\r\n              },\r\n              {\r\n                  onClick: () => goToRoute('/register'),\r\n                  icon: faUser,\r\n                  name: 'Register',\r\n              }\r\n          );\r\n\r\n    return (\r\n        <AnimatedNav vertical style={style} className=\"navnav\">\r\n            <h3>Share</h3>\r\n            <hr />\r\n            {routes.map(route => (\r\n                <NavItem key={route.name}>\r\n                    <button\r\n                        onClick={route.onClick}\r\n                        className=\"navnavbutton navnavlink\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={route.icon}\r\n                            className=\"navnavitem\"\r\n                        />\r\n                        <p className=\"navnavtext\">{route.name}</p>\r\n                    </button>\r\n                </NavItem>\r\n            ))}\r\n        </AnimatedNav>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\n//Hook used for accesibility purposes to disable animations\r\n\r\nconst getInitialState = () =>\r\n    !window.matchMedia('(prefers-reduced-motion: no-preference)').matches;\r\n\r\nexport default function usePrefersReducedMotion() {\r\n    const [prefersReducedMotion, setPrefersReducedMotion] = useState(\r\n        getInitialState\r\n    );\r\n\r\n    useEffect(() => {\r\n        const mediaQueryList = window.matchMedia(\r\n            '(prefers-reduced-motion: no-preference)'\r\n        );\r\n        mediaQueryList.addEventListener('change', event => {\r\n            setPrefersReducedMotion(!event.matches);\r\n        });\r\n\r\n        return () => {\r\n            mediaQueryList.removeEventListener('change', event => {\r\n                setPrefersReducedMotion(!event.matches);\r\n            });\r\n        };\r\n    }, []);\r\n    return prefersReducedMotion;\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Badge } from 'reactstrap';\r\nimport { LoggedInContext } from '../Auth';\r\nimport '../../style/post.css';\r\n\r\nexport default function LikeButton({ likes, uuid, setLikes }) {\r\n    const loggedIn = useContext(LoggedInContext);\r\n    const usernames = likes.map(user => user.username);\r\n\r\n    const handleLike = async () => {\r\n        const result = await fetchCsrf(`/knowledge/post/${uuid}`, {}, 'PUT');\r\n        if (result.errors) {\r\n            alert('An error has occured. Try again later.');\r\n        } else {\r\n            setLikes(result.likes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn && (\r\n                <button onClick={handleLike} className=\"like-button\">\r\n                    <FontAwesomeIcon\r\n                        icon={faHeart}\r\n                        title=\"like button\"\r\n                        className={\r\n                            usernames.includes(loggedIn)\r\n                                ? 'dislike-icon'\r\n                                : 'like-icon'\r\n                        }\r\n                    />\r\n                    <span className=\"visually-hidden\">\r\n                        {usernames.includes(loggedIn) ? 'Like' : 'Dislike'}\r\n                        the post\r\n                    </span>\r\n                </button>\r\n            )}\r\n            <Badge pill color=\"info\">\r\n                {likes.length}\r\n            </Badge>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PostRow } from './';\r\nimport { CardDeck } from 'reactstrap';\r\nimport { animated, useSpring } from 'react-spring';\r\nimport { Link } from 'react-router-dom';\r\nimport { usePrefersReducedMotion } from '../General';\r\n\r\nconst AnimatedDeck = animated(CardDeck);\r\n\r\nexport default function PostList({ posts }) {\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n\r\n    const deckStyles = useSpring({\r\n        from: {\r\n            transform: 'translate3D(100px,0,0)',\r\n        },\r\n        to: {\r\n            transform: 'translate3D(0,0,0)',\r\n        },\r\n        immediate: prefersReducedMotion,\r\n    });\r\n    //Handle no posts, temporal fix as for the poster, handle the type rerender before the items update\r\n    return posts.length > 0 ? (\r\n        <AnimatedDeck style={deckStyles} className=\"deck\">\r\n            {posts.map(post => (\r\n                <PostRow post={post} key={post.id} />\r\n            ))}\r\n        </AnimatedDeck>\r\n    ) : (\r\n        <h5>\r\n            Looks like there are no posts here.{' '}\r\n            <Link to=\"posts/new\">Be the first one to make a post!</Link>\r\n        </h5>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FormGroup, Form, Label, Alert } from 'reactstrap';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { fetchCsrf } from '../Auth';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function PostForm() {\r\n    const submitButton = useRef();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const { pathname } = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const toggleMessage = () => setMessage({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        data.hubs = pathname.split('/');\r\n        const result = await fetchCsrf('/knowledge/new/post', data, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = true;\r\n        navigate(-1);\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: '20px' }}>\r\n            <h3>New post</h3>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={toggleMessage}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            <Form\r\n                style={{ margin: '10px' }}\r\n                method=\"POST\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n                <h6>\r\n                    In here you make a new post. The content will be rendered\r\n                    using markdown.{' '}\r\n                    <a\r\n                        href=\"https://www.markdowntutorial.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        What is markdown and how to use it.\r\n                    </a>\r\n                </h6>\r\n                <FormGroup>\r\n                    <Label for=\"title\">Title: </Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        aria-label=\"title\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Title...\"\r\n                        className=\"form-control\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 65,\r\n                        })}\r\n                    />\r\n                    {errors.title && (\r\n                        <p className=\"error-message\">\r\n                            {errors.title.type === 'required'\r\n                                ? 'You must provide a title!'\r\n                                : 'Title must be 64 characters at most!'}\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content: </Label>\r\n                    <TextArea\r\n                        type=\"text\"\r\n                        aria-label=\"content\"\r\n                        name=\"content\"\r\n                        id=\"content\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Some good content...\"\r\n                        ref={register({ required: true })}\r\n                        rows={20}\r\n                        maxLength=\"2050\"\r\n                    />\r\n                    {errors.content && (\r\n                        <p className=\"error-message\">\r\n                            You must provide some content!\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Create post\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { Card, CardHeader, CardText, CardBody, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faEdit,\r\n    faSave,\r\n    faWindowClose,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { fetchCsrf } from '../Auth';\r\nimport TextArea from 'react-autosize-textarea';\r\nimport Markdown from 'react-markdown';\r\nimport LoggedinContext from '../Auth/LoggedInContext';\r\nimport '../../style/post.css';\r\n\r\nexport default function Comment({ comment }) {\r\n    const loggedIn = useContext(LoggedinContext);\r\n    const editCommentContent = useRef();\r\n    const [content, setContent] = useState(comment.content);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const toggleEditing = () => setEditing(!editing);\r\n\r\n    const editComment = async () => {\r\n        if (editCommentContent.current) {\r\n            const { value } = editCommentContent.current;\r\n            if (value.length > 256) {\r\n                alert('Comment must be less than 256 characters long');\r\n                return;\r\n            }\r\n            setContent(value);\r\n            const result = await fetchCsrf(\r\n                `/knowledge/comment/${comment.id}`,\r\n                { content: value },\r\n                'PUT'\r\n            );\r\n            if (result.errors) {\r\n                alert(result.errors[Object.keys(result.errors)[0]]);\r\n            }\r\n        }\r\n        toggleEditing();\r\n    };\r\n    return (\r\n        <Card style={{ marginTop: '20px', marginBottom: '20px' }}>\r\n            <CardHeader\r\n                style={{\r\n                    backgroundColor: 'rgb(203, 223, 230)',\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <div>\r\n                    <h4>@{comment.commenter.username}</h4>\r\n                    <CardText className=\"text-muted\">{comment.date}</CardText>\r\n                </div>\r\n                {comment.commenter.username === loggedIn && (\r\n                    <div>\r\n                        {editing && (\r\n                            <Button\r\n                                color=\"danger\"\r\n                                style={{ fontSize: '0.9rem' }}\r\n                                outline\r\n                                title=\"Cancel\"\r\n                                onClick={toggleEditing}\r\n                            >\r\n                                <span className=\"visually-hidden\">cancel</span>\r\n                                <FontAwesomeIcon icon={faWindowClose} />\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            color={editing ? 'success' : 'primary'}\r\n                            style={{ marginLeft: '10px', fontSize: '0.9rem' }}\r\n                            outline\r\n                            title={editing ? 'Save' : 'Edit'}\r\n                            disabled={\r\n                                editCommentContent.current &&\r\n                                editCommentContent.current.length < 1\r\n                            }\r\n                            onClick={editComment}\r\n                        >\r\n                            <span className=\"visually-hidden\">\r\n                                {editing ? 'save' : 'edit'}\r\n                            </span>\r\n                            <FontAwesomeIcon icon={editing ? faSave : faEdit} />\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </CardHeader>\r\n            <CardBody style={{ backgroundColor: 'rgb(215, 245, 255)' }}>\r\n                {editing ? (\r\n                    <TextArea\r\n                        className=\"edit-comment\"\r\n                        ref={editCommentContent}\r\n                        maxLength=\"256\"\r\n                    >\r\n                        {content}\r\n                    </TextArea>\r\n                ) : (\r\n                    <Markdown\r\n                        style={{\r\n                            whiteSpcae: 'preWrap',\r\n                            marginTop: '0px',\r\n                            marginBottom: '1rem',\r\n                        }}\r\n                    >\r\n                        {content}\r\n                    </Markdown>\r\n                )}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\nimport { useTransition, animated, config } from 'react-spring';\r\nimport { usePrefersReducedMotion } from '../General';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport default function List({ comments }) {\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n    const [page, setPage] = useState(1);\r\n    const [commentList, setCommentList] = useState(comments.slice(0, 5));\r\n\r\n    const transition = useTransition(commentList, comment => comment.id, {\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translate3D(-100px,0,0)',\r\n        },\r\n        enter: { opacity: 1, transform: 'translate3D(0,0,0)' },\r\n        config: config.wobbly,\r\n        immediate: prefersReducedMotion,\r\n    });\r\n\r\n    const handleLoadMore = () => {\r\n        setCommentList([\r\n            ...commentList,\r\n            ...comments.slice(page * 5, (page + 1) * 5),\r\n        ]);\r\n        setPage(page + 1);\r\n    };\r\n\r\n    let pageYOffset = window.pageYOffset;\r\n\r\n    useEffect(() => {\r\n        if (comments[0] !== undefined)\r\n            setCommentList(prevCommentList => [\r\n                comments[0],\r\n                ...prevCommentList.slice(1),\r\n            ]);\r\n    }, [comments]);\r\n\r\n    //Keep the same page scroll so that the comments don't appear at the bottom.\r\n    useEffect(() => {\r\n        window.scroll({ top: pageYOffset });\r\n    }, [commentList, pageYOffset]);\r\n\r\n    return (\r\n        <div>\r\n            {transition.map(({ item, key, props }) => (\r\n                <animated.div\r\n                    style={{ ...props, overflow: 'hidden' }}\r\n                    key={key}\r\n                >\r\n                    <Comment comment={item} />\r\n                </animated.div>\r\n            ))}\r\n            {page * 5 <= comments.length && (\r\n                <button\r\n                    className=\"btn btn-primary center\"\r\n                    onClick={handleLoadMore}\r\n                >\r\n                    Load more\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { fetchCsrf } from '../Auth';\r\nimport { Form, FormGroup, UncontrolledAlert } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function New({ setComments, post }) {\r\n    const { register, handleSubmit, reset, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const submitButton = useRef();\r\n\r\n    const toggleMessage = () => setMessage({});\r\n\r\n    const onSubmit = async data => {\r\n        //Disable button to prevent submitting twice\r\n        submitButton.current.disabled = true;\r\n\r\n        if (data.content.length < 1) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'You must fill out the comment!',\r\n            });\r\n            submitButton.current.disabled = false;\r\n            return;\r\n        }\r\n        const formData = {\r\n            content: data.content,\r\n            post: post,\r\n        };\r\n        const result = await fetchCsrf('/knowledge/comment', formData, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n        } else {\r\n            setMessage({\r\n                type: 'success',\r\n                content: 'Comment posted successfully.',\r\n            });\r\n            reset();\r\n        }\r\n        submitButton.current.disabled = false;\r\n        //Add comment to comment lists\r\n        try {\r\n            setComments(prevComments => [result.comment, ...prevComments]);\r\n        } catch (error) {\r\n            alert(\r\n                'Something went wrong in showing your comment. It should show when you reload though.'\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <UncontrolledAlert color={message.type} toggle={toggleMessage}>\r\n                    {message.content}\r\n                </UncontrolledAlert>\r\n            )}\r\n            {errors.content && (\r\n                <UncontrolledAlert color=\"danger\">\r\n                    {errors.content.type === 'required'\r\n                        ? 'You must fill out the comment!'\r\n                        : 'Comment must be under 257 characters!'}\r\n                </UncontrolledAlert>\r\n            )}\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <TextArea\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 257,\r\n                        })}\r\n                        placeholder=\"A valuable comment...\"\r\n                        name=\"content\"\r\n                        aria-label=\"Comment content\"\r\n                        className=\"form-control\"\r\n                    />\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Share your comment\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Alert, Badge, Spinner } from 'reactstrap';\r\nimport { CommentList, NewComment } from '../Comment';\r\nimport { LoggedInContext } from '../Auth';\r\nimport { LikeButton } from './';\r\nimport Markdown from 'react-markdown';\r\nimport '../../style/post.css';\r\n\r\nexport default function Post() {\r\n    const { uuid } = useParams();\r\n    const [post, setPost] = useState({});\r\n    const [likes, setLikes] = useState();\r\n    const [comments, setComments] = useState([]);\r\n    const loggedIn = useContext(LoggedInContext);\r\n\r\n    useEffect(() => {\r\n        //get the post and set the comments\r\n        const getPost = async () => {\r\n            const response = await fetch(`/knowledge/post/${uuid}`);\r\n            const result = await response.json();\r\n            setPost(result);\r\n            setLikes(result.likes);\r\n            setComments(result.comments);\r\n        };\r\n        getPost();\r\n    }, [uuid]);\r\n\r\n    return !post.content ? (\r\n        !post.error ? (\r\n            <Spinner color=\"primary\" />\r\n        ) : (\r\n            <h2>This post couldn't be found</h2>\r\n        )\r\n    ) : (\r\n        <div style={{ padding: '25px' }}>\r\n            <div>\r\n                <h4>{post.poster.username}</h4>\r\n                <Link\r\n                    to={{\r\n                        pathname: `/hubs/${post.hub.full_path}`,\r\n                        state: { hub: post.hub },\r\n                    }}\r\n                >\r\n                    <Badge color=\"primary\">{post.hub.title}</Badge>\r\n                </Link>\r\n                {likes && (\r\n                    <LikeButton\r\n                        setLikes={setLikes}\r\n                        likes={likes}\r\n                        uuid={post.uuid}\r\n                    />\r\n                )}\r\n                <footer style={{ fontSize: '12px' }}>{post.date}</footer>\r\n                <h2 id=\"post-title\">{post.title}</h2>\r\n            </div>\r\n            <hr />\r\n            <div className=\"wrapper\">\r\n                <div id=\"post-div\">\r\n                    <Markdown>{post.content}</Markdown>\r\n                </div>\r\n                <hr />\r\n                {loggedIn ? (\r\n                    <NewComment post={post.id} setComments={setComments} />\r\n                ) : (\r\n                    <Alert color=\"danger\">\r\n                        You must be logged in to comment!\r\n                    </Alert>\r\n                )}\r\n                {comments && comments.length > 0 ? (\r\n                    <CommentList comments={comments} />\r\n                ) : (\r\n                    <Alert color=\"info\">There are no comments here!</Alert>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    CardSubtitle,\r\n    Col,\r\n    CardHeader,\r\n    CardFooter,\r\n} from 'reactstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../style/post.css';\r\n\r\nexport default function Row({ post }) {\r\n    const navigate = useNavigate();\r\n    const goToPost = () => navigate(`posts/${post.uuid}`);\r\n\r\n    return (\r\n        <Col md=\"12\" style={{ marginBottom: '30px' }}>\r\n            <Card className=\"hover-card\" onClick={goToPost} title=\"See more\">\r\n                <CardHeader style={{ backgroundColor: '#68d8ee' }}>\r\n                    <CardTitle>\r\n                        <h5>{post.title}</h5>\r\n                    </CardTitle>\r\n                    <CardSubtitle>By: {post.poster.username}</CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody className=\"back-blue\">\r\n                    <CardText className=\"post-content\">{post.content}</CardText>\r\n                </CardBody>\r\n                <CardFooter className=\"footer back-blue\">\r\n                    <p className=\"card-link\">\r\n                        <Link to={`/posts/${post.uuid}`} aria-label=\"see more\">\r\n                            <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                            <span className=\"visually-hidden\">See more</span>\r\n                        </Link>\r\n                    </p>\r\n                    <CardText className=\"text-muted\">{post.date}</CardText>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PaginationItem, PaginationLink, Pagination } from 'reactstrap';\r\n\r\nexport default function Paginate({ setCurrentPage, currentPage, last }) {\r\n    return (\r\n        <Pagination style={{ justifyContent: 'center' }}>\r\n            {/* Make sure current page isn't the first to disable it */}\r\n            <PaginationItem disabled={currentPage === 1} key=\"prev\">\r\n                <PaginationLink\r\n                    previous\r\n                    onClick={() => setCurrentPage(currentPage - 1)}\r\n                />\r\n            </PaginationItem>\r\n            {/*Make the list of pages uniqui in case the active one is first or last by making the list a set and then a list again*/}\r\n            {[...new Set([1, currentPage, last])].map(number => {\r\n                return (\r\n                    <PaginationItem\r\n                        active={number === currentPage}\r\n                        key={number.toString()}\r\n                    >\r\n                        <PaginationLink onClick={() => setCurrentPage(number)}>\r\n                            {number}\r\n                        </PaginationLink>\r\n                    </PaginationItem>\r\n                );\r\n            })}\r\n            {/* Make sure current page isn't the last to disable it */}\r\n            <PaginationItem disabled={currentPage === last} key=\"next\">\r\n                <PaginationLink\r\n                    next\r\n                    onClick={() => setCurrentPage(currentPage + 1)}\r\n                />\r\n            </PaginationItem>\r\n        </Pagination>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useLocation, Link } from 'react-router-dom';\r\nimport { Jumbotron, Spinner } from 'reactstrap';\r\nimport { PostList } from '../Post';\r\nimport { HubList, ToggleButton } from './';\r\nimport { Search, Dropdown } from '../General';\r\nimport { LoggedInContext } from '../Auth';\r\nimport Paginate from '../Pagination';\r\nimport '../../style/hub.css';\r\n\r\nexport default function Hub() {\r\n    const [hub, setHub] = useState(useLocation().state?.hub);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [items, setItems] = useState(undefined);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [type, setType] = useState('posts');\r\n    const [search, setSearch] = useState('');\r\n    const { title } = useParams();\r\n    const loggedIn = useContext(LoggedInContext);\r\n    const pathlist = useLocation().pathname.split('/');\r\n\r\n    useEffect(() => {\r\n        if (!hub) {\r\n            const getHub = async () => {\r\n                const response = await fetch(\r\n                    `/knowledge/hub/details/${title}?list=${pathlist}`\r\n                );\r\n                const result = await response.json();\r\n                setHub(result);\r\n            };\r\n            getHub();\r\n        }\r\n    }, [title, hub, pathlist]);\r\n\r\n    //Get items for given category and skip if category isn't ready\r\n    useEffect(() => {\r\n        //Reset the items to make the loading effect\r\n        setIsLoading(true);\r\n        //Only fetch if items aren't set and the hub isn't undefined\r\n        if (hub !== undefined) {\r\n            const getItems = async () => {\r\n                const response = await fetch(\r\n                    `/knowledge/hub/items/${hub.id}?sort=${sortBy[0]}&page=${currentPage}&type=${type}&search=${search}`\r\n                );\r\n                const result = await response.json();\r\n                setItems(result);\r\n                setIsLoading(false);\r\n            };\r\n            getItems();\r\n        }\r\n    }, [hub, currentPage, type, search, sortBy]);\r\n\r\n    const handleTypeChange = () => {\r\n        //Set is loading here to prevent memory leaks\r\n        setIsLoading(true);\r\n        //Set the sort by to newest to avoid invalid sort by in the hubs\r\n        setType(type === 'posts' ? 'hubs' : 'posts');\r\n        setSortBy(['-date', 'Newest']);\r\n        //Set the current page to avoid errors if the pages count is less than the current page\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n    ];\r\n    //Posts only sort by options\r\n    if (type === 'posts')\r\n        options.push(['-likes', 'Most Liked'], ['likes', 'Least liked']);\r\n\r\n    return !hub ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : hub.error ? (\r\n        <h3>We couldn't find this hub.</h3>\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <Jumbotron\r\n                style={{\r\n                    paddingTop: 0,\r\n                    marginTop: '-20px',\r\n                    whiteSpace: 'pre-wrap',\r\n                }}\r\n            >\r\n                <hr />\r\n                <h3 className=\"display-3 hub-name\">\r\n                    {title.replace(/-/g, ' ')}\r\n                </h3>\r\n                <p style={{ fontSize: '1.5rem' }}>{hub.description}</p>\r\n                <hr className=\"my-2\" />\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <ToggleButton\r\n                        type={type}\r\n                        handleTypeChange={handleTypeChange}\r\n                    />\r\n                    {loggedIn && type === 'posts' ? (\r\n                        /*Ensure this isn't a source hub */\r\n                        hub.full_path.includes('/') && (\r\n                            <Link to=\"posts/new\" className=\"lead\">\r\n                                + New post\r\n                            </Link>\r\n                        )\r\n                    ) : (\r\n                        <Link to=\"new\" className=\"lead\">\r\n                            + New Hub\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </Jumbotron>\r\n            <div className=\"wrapper\">\r\n                <Search\r\n                    setSearch={setSearch}\r\n                    type={type}\r\n                    setCurrentPage={setCurrentPage}\r\n                />\r\n                <Dropdown\r\n                    options={options}\r\n                    setSortBy={setSortBy}\r\n                    selected={sortBy[1]}\r\n                />\r\n                {!isLoading ? (\r\n                    type === 'posts' ? (\r\n                        <>\r\n                            <PostList posts={items.results} />\r\n                            <Paginate\r\n                                currentPage={currentPage}\r\n                                last={items.total}\r\n                                setCurrentPage={setCurrentPage}\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <HubList hubs={items.results} />\r\n                            <Paginate\r\n                                currentPage={currentPage}\r\n                                last={items.total}\r\n                                setCurrentPage={setCurrentPage}\r\n                            />\r\n                        </>\r\n                    )\r\n                ) : (\r\n                    <Spinner color=\"primary\" />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { animated, useSpring } from 'react-spring';\r\nimport { CardDeck } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { usePrefersReducedMotion } from '../General';\r\nimport { Row } from './';\r\n\r\nconst AnimatedDeck = animated(CardDeck);\r\n\r\nexport default function HubList({ hubs }) {\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n    const deckStyles = useSpring({\r\n        from: {\r\n            transform: 'translate3D(0,100px,0)',\r\n        },\r\n        to: {\r\n            transform: 'translate3D(0,0,0)',\r\n        },\r\n        immediate: prefersReducedMotion,\r\n    });\r\n\r\n    return hubs.length > 0 ? (\r\n        <AnimatedDeck style={deckStyles} className=\"deck wrapper\">\r\n            {hubs.map(hub => (\r\n                <Row hub={hub} key={hub.id} />\r\n            ))}\r\n        </AnimatedDeck>\r\n    ) : (\r\n        <h5>\r\n            Looks like there are no hubs here.{' '}\r\n            <Link to=\"new\">Be the first one to make a hub!</Link>\r\n        </h5>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\n\r\nexport default function HubPath() {\r\n    const { pathname } = useLocation();\r\n    const [hubPath, setHubPath] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //Make an array from the path\r\n        let newHubPath = pathname.split('/');\r\n        //Remove those 3 from the path\r\n        if (newHubPath[newHubPath.length - 2] === 'posts')\r\n            newHubPath.splice(-2);\r\n        newHubPath = newHubPath.filter(\r\n            path => !['', 'hubs', 'new'].includes(path)\r\n        );\r\n        if (newHubPath[newHubPath.length - 2] === 'posts')\r\n            newHubPath.splice(-2);\r\n        //Remove the last two items if posts is there\r\n        setHubPath(newHubPath);\r\n    }, [pathname]);\r\n\r\n    return pathname.split('/').includes('hubs') && hubPath ? (\r\n        <Breadcrumb style={{ paddingTop: 0 }}>\r\n            {hubPath.map((hub, index) => (\r\n                <BreadcrumbItem key={index}>\r\n                    <Link to={`/hubs/${hubPath.slice(0, index + 1).join('/')}`}>\r\n                        {hub}\r\n                    </Link>\r\n                </BreadcrumbItem>\r\n            ))}\r\n        </Breadcrumb>\r\n    ) : null;\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    CardText,\r\n    CardHeader,\r\n    CardBody,\r\n    CardFooter,\r\n    Col,\r\n    CardSubtitle,\r\n} from 'reactstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Row({ hub }) {\r\n    const navigate = useNavigate();\r\n    const goToHub = () => navigate(hub.title);\r\n\r\n    return (\r\n        <Col md=\"12\" style={{ marginBottom: '30px' }}>\r\n            <Card onClick={goToHub} title=\"Go to hub\" className=\"hover-card\">\r\n                <CardHeader className=\"back-green\">\r\n                    <CardTitle>\r\n                        <h5>{hub.title.replace(/-/g, ' ')}</h5>\r\n                    </CardTitle>\r\n                    <CardSubtitle>\r\n                        <p style={{ fontSize: '0.85em' }}>Made {hub.date}</p>\r\n                    </CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody style={{ backgroundColor: '#a2ffaf' }}>\r\n                    <CardText>{hub.description}</CardText>\r\n                </CardBody>\r\n                <CardFooter className=\"footer back-green\">\r\n                    <p className=\"card-link\">\r\n                        <Link to={`${hub.title}`} aria-label=\"see more\">\r\n                            <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                            <span className=\"visually-hidden\">See more</span>\r\n                        </Link>\r\n                    </p>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { animated, useSpring, config } from 'react-spring';\r\nimport { usePrefersReducedMotion } from '../General';\r\nimport '../../style/hub.css';\r\n\r\nexport default function ToggleButton({ type, handleTypeChange }) {\r\n    const prefersReducedMotion = usePrefersReducedMotion();\r\n    const { transform, color } = useSpring({\r\n        transform:\r\n            type !== 'hubs' ? 'translate3D(100%,0,0)' : 'translate3d(0,0,0)',\r\n        color: type !== 'hubs' ? 'white' : 'black',\r\n        config: { ...config.molasses, friction: 60 },\r\n        immediate: prefersReducedMotion,\r\n    });\r\n\r\n    return (\r\n        <Button\r\n            color=\"primary\"\r\n            className=\"lead type-toggle-button\"\r\n            onClick={handleTypeChange}\r\n            style={{\r\n                borderColor: type === 'hubs' && '#86eb93',\r\n            }}\r\n        >\r\n            <animated.span style={{ color }} className=\"type-toggle-span\">\r\n                {type.charAt(0).toUpperCase() + type.slice(1)}\r\n            </animated.span>\r\n            <animated.div\r\n                className=\"type-toggle-div\"\r\n                style={{\r\n                    transform: transform,\r\n                }}\r\n            />\r\n        </Button>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { Col, Form, FormGroup, Label, Row, Alert } from 'reactstrap';\r\nimport { fetchCsrf } from '../Auth';\r\n\r\nexport default function NewHub() {\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const [message, setMessage] = useState(null);\r\n    const { pathname } = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const toggleMessage = () => setMessage(null);\r\n\r\n    const onSubmit = async data => {\r\n        data.hubs = pathname.split('/');\r\n        //replace spaces with dashes\r\n        data.title = data.title.replace(/ /g, '-');\r\n        const result = await fetchCsrf('/knowledge/new/hub', data, 'POST');\r\n        console.log(result[0]);\r\n        if (result[0] !== undefined) {\r\n            setMessage(result[0]);\r\n            return;\r\n        }\r\n        navigate(`/hubs/${result.full_path}`);\r\n        return;\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h2 style={{ textAlign: 'center', marginTop: '30px' }}>\r\n                Make a new hub\r\n            </h2>\r\n            <h5 style={{ margin: '20px' }}>\r\n                Create a new hub to share all sorts of things with others!\r\n            </h5>\r\n            {message && (\r\n                <Alert color=\"danger\" toggle={toggleMessage}>\r\n                    {message}\r\n                </Alert>\r\n            )}\r\n            <Form\r\n                onSubmit={handleSubmit(onSubmit)}\r\n                style={{ textAlign: 'left' }}\r\n            >\r\n                <FormGroup>\r\n                    <Label for=\"title\">Hub name</Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        className=\"form-control input\"\r\n                        name=\"title\"\r\n                        placeholder=\"A nice name...\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: {\r\n                                length: value => value.length < 21,\r\n                                name: value =>\r\n                                    value.toLowerCase() !== 'new' &&\r\n                                    value.toLowerCase() !== 'posts',\r\n                            },\r\n                        })}\r\n                    />\r\n                    {errors.title && (\r\n                        <p className=\"error-message\">\r\n                            {errors.title.type === 'required'\r\n                                ? 'You need to give the hub a name!'\r\n                                : errors.title.type === 'length'\r\n                                ? 'The hub name must be under 21 characters!'\r\n                                : 'That hub name is not allowed!'}\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"description\">The hub description</Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"description\"\r\n                        className=\"form-control input\"\r\n                        name=\"description\"\r\n                        placeholder=\"An awesome description...\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 101,\r\n                        })}\r\n                    />\r\n                    {errors.description && (\r\n                        <p className=\"error-message\">\r\n                            {errors.description.type === 'required'\r\n                                ? 'You need to give the hub a description!'\r\n                                : 'The hub description must be under 101 characters!'}\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"New hub\"\r\n                    className=\"btn btn-primary\"\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { PostList } from './Post';\r\nimport { Spinner } from 'reactstrap';\r\nimport { Dropdown } from './General';\r\nimport Paginate from './Pagination';\r\n\r\nexport default function Home() {\r\n    const [posts, setPosts] = useState(null);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n\r\n    //get the posts for a page\r\n\r\n    useEffect(() => {\r\n        setPosts({});\r\n        const getPosts = async () => {\r\n            const response = await fetch(\r\n                `knowledge/hub/items/1?page=${currentPage}&sort=${sortBy[0]}&type=posts&search=`\r\n            );\r\n            const result = await response.json();\r\n            setPosts(result);\r\n        };\r\n        getPosts();\r\n    }, [currentPage, sortBy]);\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n        ['-likes', 'Most Liked'],\r\n        ['likes', 'Least liked'],\r\n    ];\r\n\r\n    return posts === null ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <h3 style={{ textAlign: 'center' }}>Home</h3>\r\n            <Dropdown\r\n                options={options}\r\n                setSortBy={setSortBy}\r\n                selected={sortBy[1]}\r\n            />\r\n            {posts.results ? (\r\n                <>\r\n                    <PostList posts={posts.results} />\r\n                    <Paginate\r\n                        currentPage={currentPage}\r\n                        last={posts.total}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <Spinner color=\"primary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Routes,\n    Outlet,\n    Navigate,\n} from 'react-router-dom';\nimport {\n    Register,\n    Login,\n    LoggedInProvider,\n    ToggleLoggedInProvider,\n} from './components/Auth';\nimport { Sidebar } from './components/General';\nimport { Post, NewPost } from './components/Post';\nimport { Hub, HubPath, NewHub } from './components/Hub';\nimport Home from './components/Home';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default function App() {\n    const [loggedIn, setLoggedIn] = useState(undefined);\n\n    useEffect(() => {\n        if (loggedIn !== undefined) return () => {};\n        const getUser = async () => {\n            const response = await fetch('/knowledge/login');\n            const { user } = await response.json();\n            setLoggedIn(user);\n        };\n        getUser();\n    }, [loggedIn]);\n\n    return (\n        <Router>\n            <LoggedInProvider value={loggedIn}>\n                <ToggleLoggedInProvider value={setLoggedIn}>\n                    <Sidebar>\n                        <div className=\"App\">\n                            <HubPath />\n                            <Routes>\n                                <Route path=\"/\" element={<Home />} />\n                                <Route\n                                    path=\"/register\"\n                                    element={\n                                        loggedIn ? (\n                                            <Navigate to=\"/\" />\n                                        ) : (\n                                            <Register />\n                                        )\n                                    }\n                                />\n                                <Route\n                                    path=\"/login\"\n                                    element={\n                                        loggedIn ? (\n                                            <Navigate to=\"/\" />\n                                        ) : (\n                                            <Login />\n                                        )\n                                    }\n                                />\n                                <Route path=\"posts/:uuid\" element={<Post />} />\n                                <Route path=\"/hubs/:title*\" element={<Hubs />}>\n                                    <Route path=\"/\" element={<Hub />} />\n                                    <Route\n                                        path=\"posts/:uuid\"\n                                        element={<Post />}\n                                    />\n                                    <Route path=\"new\" element={<NewHub />} />\n                                    <Route\n                                        path=\":title*\"\n                                        element={\n                                            <HubRoutes loggedIn={loggedIn} />\n                                        }\n                                    />\n                                </Route>\n                            </Routes>\n                        </div>\n                    </Sidebar>\n                </ToggleLoggedInProvider>\n            </LoggedInProvider>\n        </Router>\n    );\n}\n\nfunction Hubs() {\n    return <Outlet />;\n}\n\n/*\nOkay so you may be looking at this and wonder what the heck is he doing here, and \nsince it's a bit complex I'll explain. What we do here is that we first render\nthe Hub Routes above. The HubRoutes include a Routes component and the specific \nroutes we want. Now, this is made of the index, new post, specific post, and a sub route. \nWhen the path becomes from something like /hub/TITLE to /hub/TITLE/TITLE2,\nOur HubRoutes render itself again with the new TITLE2 route as the main one. This is \nbecause of the :title* path we have. So this allows us to recursively nest hubs. But why \ndoes it work? In the v6 of react router, you only want an Outlet to render the chosen path.\nSo just exposing the new nested routes still works because the Outlet takes their place.\n*/\nfunction HubRoutes({ loggedIn }) {\n    return (\n        <>\n            <Routes>\n                <Route path=\"/\" element={<Hub />} />\n                <Route\n                    path=\"posts/new\"\n                    element={loggedIn ? <NewPost /> : <Navigate to=\"/login\" />}\n                />\n                <Route path=\"posts/:uuid\" element={<Post />} />\n                <Route path=\"new\" element={<NewHub />} />\n                <Route\n                    path=\":title*\"\n                    element={<HubRoutes loggedIn={loggedIn} />}\n                />\n            </Routes>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_Login_re_4vu2.303e4a67.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_share_online_r87b.fbd5ff07.svg\";"],"sourceRoot":""}