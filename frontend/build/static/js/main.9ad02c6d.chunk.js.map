{"version":3,"sources":["components/Auth/fetchCsrf.js","components/Auth/ToggleLoginContext.js","components/Auth/Register.js","components/Auth/Login.js","components/Auth/LoggedInContext.js","components/General/SidebarContent.js","components/General/Navbar.js","components/Comment/Comment.js","components/Comment/List.js","components/Comment/New.js","components/Post/Like.js","components/Post/Post.js","components/Post/New.js","components/Post/Row.js","components/Post/List.js","components/Pagination.js","components/General/Dropdown.js","components/Home.js","components/Hub/Row.js","components/Hub/HubList.js","components/General/Search.js","components/Hub/ToggleButton.js","components/Hub/Hub.js","App.js","serviceWorker.js","index.js","images/undraw_share_online_r87b.svg","images/undraw_Login_re_4vu2.svg"],"names":["getCookie","name","document","cookie","token","split","map","c","trim","filter","startsWith","length","decodeURIComponent","fetchCsrf","url","body","method","a","fetch","mode","credentials","headers","Accept","JSON","stringify","response","json","result","ToggleLoggedinContext","React","createContext","ToggleLoggedinProvider","Provider","Register","useForm","handleSubmit","errors","register","watch","handleLogin","useContext","submitButton","useRef","useState","message","setMessage","onSubmit","data","current","disabled","username","password","confirm","email","type","content","Object","keys","Row","style","margin","Col","md","src","ShareImage","alt","width","padding","UncontrolledAlert","color","toggle","maxWidth","placeholder","ref","required","className","aria-label","marginTop","marginBottom","validate","value","Login","submitInput","height","loginImage","minWidth","to","LoggedinContext","LoggedinProvider","AnimatedNav","animated","Nav","SidebarContent","toggleSidebar","loggedIn","LoggedInContext","push","useHistory","logout","alert","navigate","route","routes","onClick","icon","faHome","faPlus","faSignOutAlt","faSignInAlt","faUser","vertical","NavItem","Sidebar","children","collapsed","setCollapsed","localStorage","getItem","theme","setTheme","useSpring","opacity","transform","useEffect","setItem","documentElement","setAttribute","faBars","faSun","faMoon","Comment","comment","editCommentContent","setContent","editing","setEditing","editComment","id","Card","CardHeader","backgroundColor","display","justifyContent","commenter","CardText","date","Button","fontSize","outline","title","faWindowClose","marginLeft","faSave","faEdit","CardBody","maxLength","whiteSpcae","List","comments","transition","useTransition","from","enter","config","wobbly","item","key","props","div","overflow","New","setComments","post","reset","formData","prevComments","error","console","log","Alert","Form","FormGroup","Label","for","LikeButton","likes","uuid","setLikes","usernames","user","handleLike","faHeart","includes","Badge","pill","Post","useParams","setPost","getPost","poster","pathname","hub","state","Spinner","PostForm","href","target","rel","rows","lg","xl","CardTitle","CardSubtitle","CardFooter","faArrowCircleRight","AnimatedDeck","CardDeck","PostList","posts","styles","Paginate","setCurrentPage","currentPage","last","Pagination","PaginationItem","PaginationLink","previous","Set","number","active","toString","next","Radio","options","setSortBy","selected","isToggled","setToggle","menubg","background","y","menuAppear","zIndex","gentle","immediate","button","data-testid","p","interpolate","option","setTimeout","handleSetOption","Home","setPosts","sortBy","getPosts","textAlign","results","total","description","HubList","hubs","transitions","CardColumns","Search","setSearch","search","paddingBottom","ToggleButton","handleTypeChange","x","molasses","friction","borderColor","span","charAt","toUpperCase","slice","Category","useLocation","setHub","items","setItems","setType","getHub","getItems","Jumbotron","App","undefined","setLoggedIn","getUser","path","exact","component","Hub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"8NAAA,SAASA,EAAUC,GACf,IAAKC,SAASC,OACV,OAAO,KAEX,IAAMC,EAAQF,SAASC,OAClBE,MAAM,KACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UACXC,QAAO,SAAAF,GAAC,OAAIA,EAAEG,WAAWT,EAAO,QAErC,OAAqB,IAAjBG,EAAMO,OACC,KAEJC,mBAAmBR,EAAM,GAAGC,MAAM,KAAK,IAG3C,SAAeQ,EAAtB,sC,4CAAO,WAAyBC,EAAKC,EAAMC,GAApC,iBAAAC,EAAA,sEACoBC,MAAMJ,EAAK,CAC9BE,OAAQA,EACRG,KAAM,cACNC,YAAa,UACbC,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChB,cAAetB,EAAU,cAE7Be,KAAMQ,KAAKC,UAAUT,KAVtB,cACGU,EADH,gBAYkBA,EAASC,OAZ3B,cAYGC,EAZH,yBAaIA,GAbJ,4C,kCCbDC,EAAwBC,IAAMC,cAAc,IACrCC,EAAyBH,EAAsBI,SAE7CJ,I,kDCIA,SAASK,IAAY,IAAD,EACmBC,cAA1CC,EADuB,EACvBA,aAAcC,EADS,EACTA,OAAQC,EADC,EACDA,SAAUC,EADT,EACSA,MAClCC,EAAcC,qBAAWZ,GACzBa,EAAeC,mBAHU,EAIDC,mBAAS,IAJR,mBAIxBC,EAJwB,KAIfC,EAJe,KAMzBC,EAAQ,uCAAG,WAAMC,GAAN,eAAA9B,EAAA,yDACbwB,EAAaO,QAAQC,UAAW,IAE5BF,EAAKG,SAASvC,QAAU,GACxBoC,EAAKI,SAASxC,QAAU,GACxBoC,EAAKK,QAAQzC,QAAU,GACvBoC,EAAKM,MAAM1C,QAAU,GANZ,uBAQT8B,EAAaO,QAAQC,UAAW,EAChCJ,EAAW,CAAES,KAAM,SAAUC,QAAS,yBAT7B,mBAUF,GAVE,UAWFR,EAAKI,WAAaJ,EAAKK,QAXrB,wBAYTX,EAAaO,QAAQC,UAAW,EAChCJ,EAAW,CACPS,KAAM,SACNC,QAAS,4CAfJ,mBAiBF,GAjBE,yBAmBQ1C,EAAU,sBAAuBkC,EAAM,QAnB/C,aAmBPpB,EAnBO,QAoBFS,OApBE,wBAqBTK,EAAaO,QAAQC,UAAW,EAChCJ,EAAW,CACPS,KAAM,SACNC,QAAS5B,EAAOS,OAAOoB,OAAOC,KAAK9B,EAAOS,QAAQ,MAxB7C,mBA0BF,GA1BE,QA4BbK,EAAaO,QAAQC,UAAW,EAChCV,EAAYZ,EAAOuB,UA7BN,4CAAH,sDAgCd,OACI,kBAACQ,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,SAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,+EACA,yBACIC,IAAKC,IACLC,IAAI,eACJN,MAAO,CAAEO,MAAO,OAAQC,QAAS,WAGzC,kBAACN,EAAA,EAAD,CAAKC,GAAG,MACHlB,EAAQW,SACL,kBAACa,EAAA,EAAD,CACIC,MAAOzB,EAAQU,KACfgB,OAAQ,kBAAMzB,EAAW,MAExBD,EAAQW,SAGjB,0BACII,MAAO,CACHQ,QAAS,OACTP,OAAQ,OACRW,SAAU,SAEdzB,SAAUX,EAAaW,IAEvB,2BACIQ,KAAK,OACLkB,YAAY,WACZC,IAAKpC,EAAS,CAAEqC,UAAU,IAC1BC,UAAU,qBACV1E,KAAK,WACL2E,aAAW,aAEdxC,EAAOc,UACJ,uBAAGyB,UAAU,iBAAb,sCAIJ,2BACIrB,KAAK,QACLkB,YAAY,QACZG,UAAU,qBACV1E,KAAK,QACL2E,aAAW,QACXH,IAAKpC,EAAS,CAAEqC,UAAU,IAC1Bf,MAAO,CAAEkB,UAAW,OAAQC,aAAc,UAE7C1C,EAAOiB,OACJ,uBAAGsB,UAAU,iBAAb,mCAIJ,2BACIrB,KAAK,WACLkB,YAAY,WACZG,UAAU,qBACV1E,KAAK,WACL2E,aAAW,WACXH,IAAKpC,EAAS,CACVqC,UAAU,EACVK,SAAU,SAAAC,GAAK,OAAIA,IAAU1C,EAAM,cAEvCqB,MAAO,CAAEkB,UAAW,OAAQC,aAAc,UAE7C1C,EAAOe,UACJ,uBAAGwB,UAAU,iBACiB,aAAzBvC,EAAOe,SAASG,KACX,qCACA,2CAGd,2BACIA,KAAK,WACLkB,YAAY,mBACZG,UAAU,qBACV1E,KAAK,UACLwE,IAAKpC,EAAS,CAAEqC,UAAU,IAC1BE,aAAW,UACXjB,MAAO,CAAEkB,UAAW,OAAQC,aAAc,UAE7C1C,EAAOgB,SACJ,uBAAGuB,UAAU,iBAAb,8CAKJ,2BACIrB,KAAK,SACL0B,MAAM,WACNJ,aAAW,WACXH,IAAKhC,EACLkC,UAAU,uB,qBCnInB,SAASM,IAAS,IAAD,EACEtC,mBAAS,IADX,mBACrBC,EADqB,KACZC,EADY,KAEtBqC,EAAcxC,mBAFQ,EAGeR,cAAnCG,EAHoB,EAGpBA,SAAUD,EAHU,EAGVA,OAAQD,EAHE,EAGFA,aACpBI,EAAcC,qBAAWZ,GAEzBkB,EAAQ,uCAAG,WAAMC,GAAN,eAAA9B,EAAA,yDACbiE,EAAYlC,QAAQC,UAAW,IAC3BF,EAAKG,SAASvC,QAAU,GAAKoC,EAAKI,SAASxC,QAAU,GAF5C,uBAGTkC,EAAW,CAAES,KAAM,SAAUC,QAAS,yBACtC2B,EAAYlC,QAAQC,UAAW,EAJtB,mBAKF,GALE,uBAOQpC,EAAU,mBAAoBkC,EAAM,QAP5C,YAOPpB,EAPO,QAQFS,OARE,wBASTS,EAAW,CACPS,KAAM,SACNC,QAAS5B,EAAOS,OAAOoB,OAAOC,KAAK9B,EAAOS,QAAQ,MAEtD8C,EAAYlC,QAAQC,UAAW,EAbtB,mBAcF,GAdE,QAgBbiC,EAAYlC,QAAQC,UAAW,EAC/BV,EAAYZ,EAAOuB,UAjBN,4CAAH,sDAoBd,OACI,kBAACQ,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,OAAQuB,OAAQ,SAClC,kBAACtB,EAAA,EAAD,CAAKC,GAAG,MACJ,yFAGA,yBACIC,IAAKqB,IACLnB,IAAI,QACJN,MAAO,CAAEO,MAAO,OAAQC,QAAS,WAGzC,kBAACN,EAAA,EAAD,CAAKC,GAAG,MACHlB,EAAQW,SACL,kBAACa,EAAA,EAAD,CACIC,MAAOzB,EAAQU,KACfgB,OAAQ,kBAAMzB,EAAW,MAExBD,EAAQW,SAGjB,0BACIT,SAAUX,EAAaW,GACvBa,MAAO,CACHC,OAAQ,OACRW,SAAU,QACVc,SAAU,QAGd,2BACI/B,KAAK,OACLkB,YAAY,WACZC,IAAKpC,EAAS,CAAEqC,UAAU,IAC1BC,UAAU,qBACV1E,KAAK,WACL2E,aAAW,aAEdxC,EAAOc,UACJ,uBAAGyB,UAAU,iBAAb,sCAIJ,2BACIrB,KAAK,WACLkB,YAAY,WACZC,IAAKpC,EAAS,CAAEqC,UAAU,IAC1BC,UAAU,qBACV1E,KAAK,WACL2E,aAAW,aAEdxC,EAAOe,UACJ,uBAAGwB,UAAU,iBAAb,sCAIJ,2BACIrB,KAAK,SACL0B,MAAM,QACNP,IAAKS,EACLN,aAAW,QACXD,UAAU,oBAEd,gCACI,iEACoC,IAChC,kBAAC,IAAD,CAAMW,GAAG,aAAT,aClG5B,IAAMC,EAAkB1D,IAAMC,cAAc,IAC/B0D,EAAmBD,EAAgBvD,SAEjCuD,I,yCCWTE,G,MAAcC,YAASC,MAEd,SAASC,EAAT,GAAmD,IAAzBC,EAAwB,EAAxBA,cAAelC,EAAS,EAATA,MAC9CmC,EAAWtD,qBAAWuD,GACtBxD,EAAcC,qBAAWZ,GACvBoE,EAASC,cAATD,KAEFE,EAAM,uCAAG,4BAAAjF,EAAA,sEACYC,MAAM,qBADlB,cACLO,EADK,gBAEUA,EAASC,OAFnB,kBAGAU,OAHA,uBAIP+D,MAAM,wBAJC,0BAOXA,MAAM,4BACN5D,EAAY,MACZsD,IATW,4CAAH,qDAYNO,EAAW,SAAAC,GACbL,EAAKK,GACLR,KAIES,EAAS,CACX,CACIC,QAAS,kBAAMH,EAAS,MACxBI,KAAMC,IACNxG,KAAM,SA6Bd,OA1BA6F,EACMQ,EAAON,KACH,CACIO,QAAS,kBAAMH,EAAS,cACxBI,KAAME,IACNzG,KAAM,YAEV,CACIsG,QAASL,EACTM,KAAMG,IACN1G,KAAM,WAGdqG,EAAON,KACH,CACIO,QAAS,kBAAMH,EAAS,WACxBI,KAAMI,IACN3G,KAAM,SAEV,CACIsG,QAAS,kBAAMH,EAAS,cACxBI,KAAMK,IACN5G,KAAM,aAKhB,kBAACwF,EAAD,CAAaqB,UAAQ,EAACnD,MAAOA,EAAOgB,UAAU,UAC1C,qCACA,6BACC2B,EAAOhG,KAAI,SAAA+F,GAAK,OACb,kBAACU,EAAA,EAAD,KACI,4BACIR,QAASF,EAAME,QACf5B,UAAU,2BAEV,kBAAC,IAAD,CACI6B,KAAMH,EAAMG,KACZ7B,UAAU,eAEd,uBAAGA,UAAU,cAAc0B,EAAMpG,YChF1C,SAAS+G,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAAY,EACRtE,oBAAS,GADD,mBACnCuE,EADmC,KACxBC,EADwB,OAEhBxE,mBAASyE,aAAaC,QAAQ,UAFd,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAGpChE,EAAUiE,YAAU,CACtBC,QAAUP,EAAgB,EAAJ,EACtBQ,UAAYR,EAA+B,oBAAnB,mBAGtBrB,EAAgB,kBAAMsB,GAAcD,IAO1C,OALAS,qBAAU,WACNP,aAAaQ,QAAQ,QAASN,GAC9BpH,SAAS2H,gBAAgBC,aAAa,aAAcR,KACrD,CAACA,IAGA,oCACI,yBAAK3C,UAAU,aACX,4BACIhB,MAAO,CAAEQ,QAAS,QAClBoC,QAASV,EACTlB,UAAU,cAEV,kBAAC,IAAD,CAAiB6B,KAAMuB,OAE3B,4BACIpD,UAAU,mBACVhB,MAAO,CAAEQ,QAAS,QAClBoC,QAAS,kBACLgB,EAAmB,SAAVD,EAAmB,QAAU,UAG1C,kBAAC,IAAD,CACI3C,UAAU,QACV6B,KAAgB,SAAVc,EAAmBU,IAAQC,QAI7C,kBAACrC,EAAD,CAAgBC,cAAeA,EAAelC,MAAOJ,IACrD,yBACII,MAAO,CAAElD,QAASyG,GAAa,aAC/BX,QAAUW,EAAuC,aAA3B,kBAAMC,GAAa,KAExCF,I,2HCrCF,SAASiB,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QACxBrC,EAAWtD,qBAAW+C,GACtB6C,EAAqB1F,mBAFc,EAGXC,mBAASwF,EAAQ5E,SAHN,mBAGlCA,EAHkC,KAGzB8E,EAHyB,OAIX1F,oBAAS,GAJE,mBAIlC2F,EAJkC,KAIzBC,EAJyB,KAMnCC,EAAW,uCAAG,8BAAAvH,EAAA,0DACZmH,EAAmBpF,QADP,uBAEJgC,EAAUoD,EAAmBpF,QAA7BgC,OACErE,OAAS,KAHP,uBAIRwF,MAAM,iDAJE,iCAOZkC,EAAWrD,GAPC,SAQSnE,EAAU,sBAAD,OACJsH,EAAQM,IAC9B,CAAElF,QAASyB,GACX,OAXQ,QAQNrD,EARM,QAaDS,QACP+D,MAAMxE,EAAOS,OAAOoB,OAAOC,KAAK9B,EAAOS,QAAQ,KAdvC,QAiBhBmG,GAAYD,GAjBI,4CAAH,qDAmBjB,OACI,kBAACI,EAAA,EAAD,CAAM/E,MAAO,CAAEC,OAAQ,OAAQuB,OAAQ,SACnC,kBAACwD,EAAA,EAAD,CACIhF,MAAO,CACHiF,gBAAiB,qBACjBC,QAAS,cACTC,eAAgB,kBAGpB,6BACI,gCAAMX,EAAQY,UAAU7F,UACxB,kBAAC8F,EAAA,EAAD,CAAUrE,UAAU,cAAcwD,EAAQc,OAE7Cd,EAAQY,UAAU7F,WAAa4C,GAC5B,6BACKwC,GACG,kBAACY,EAAA,EAAD,CACI7E,MAAM,SACNV,MAAO,CAAEwF,SAAU,UACnBC,SAAO,EACPC,MAAM,SACN9C,QAAS,kBAAMgC,GAAW,KAE1B,0BAAM5D,UAAU,mBAAhB,UACA,kBAAC,IAAD,CAAiB6B,KAAM8C,OAG/B,kBAACJ,EAAA,EAAD,CACI7E,MAAOiE,EAAU,UAAY,UAC7B3E,MAAO,CAAE4F,WAAY,OAAQJ,SAAU,UACvCC,SAAO,EACPC,MAAOf,EAAU,OAAS,OAC1BrF,SACImF,EAAmBpF,SACnBoF,EAAmBpF,QAAQrC,OAAS,EAExC4F,QAAS,kBAAMiC,MAEf,0BAAM7D,UAAU,mBACX2D,EAAU,OAAS,QAExB,kBAAC,IAAD,CAAiB9B,KAAM8B,EAAUkB,IAASC,SAK1D,kBAACC,EAAA,EAAD,CAAU/F,MAAO,CAAEiF,gBAAiB,uBAC/BN,EACG,kBAAC,IAAD,CACI3D,UAAU,eACVF,IAAK2D,EACLuB,UAAU,OAETpG,GAGL,kBAAC,IAAD,CACII,MAAO,CACHiG,WAAY,UACZ/E,UAAW,MACXC,aAAc,SAGjBvB,KClGV,SAASsG,GAAT,GAA6B,IAAbC,EAAY,EAAZA,SACrBC,EAAaC,YAAcF,GAAU,SAAA3B,GAAO,OAAIA,EAAQM,KAAI,CAC9DwB,KAAM,CACFxC,QAAS,EACTC,UAAW,sBAEfwC,MAAO,CAAEzC,QAAS,EAAGC,UAAW,mBAChCyC,OAAQA,IAAOC,SAGnB,OACI,6BACKL,EAAWzJ,KAAI,gBAAG+J,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKC,EAAd,EAAcA,MAAd,OACZ,kBAAC,IAASC,IAAV,CACI7G,MAAK,eAAO4G,EAAP,CAAcE,SAAU,WAC7BH,IAAKA,GAEL,kBAACpC,EAAD,CAASC,QAASkC,S,2CCfvB,SAASK,GAAT,GAAqC,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAAQ,EACG1I,cAA1CG,EADuC,EACvCA,SAAUF,EAD6B,EAC7BA,aAAc0I,EADe,EACfA,MAAOzI,EADQ,EACRA,OADQ,EAEjBO,mBAAS,IAFQ,mBAExCC,EAFwC,KAE/BC,EAF+B,KAGzCJ,EAAeC,mBAEfI,EAAQ,uCAAG,WAAMC,GAAN,iBAAA9B,EAAA,yDAEbwB,EAAaO,QAAQC,UAAW,IAE5BF,EAAKQ,QAAQ5C,OAAS,GAJb,uBAKTkC,EAAW,CACPS,KAAM,SACNC,QAAS,mCAEbd,EAAaO,QAAQC,UAAW,EATvB,iCAYP6H,EAAW,CACbvH,QAASR,EAAKQ,QACdqH,KAAMA,GAdG,SAgBQ/J,EAAU,qBAAsBiK,EAAU,QAhBlD,QAgBPnJ,EAhBO,QAkBFS,OACPS,EAAW,CACPS,KAAM,SACNC,QAAS5B,EAAOS,OAAOoB,OAAOC,KAAK9B,EAAOS,QAAQ,OAGtDS,EAAW,CACPS,KAAM,UACNC,QAAS,iCAEbsH,KAEJpI,EAAaO,QAAQC,UAAW,EAEhC,IACI0H,GAAY,SAAAI,GAAY,OAAKpJ,EAAOwG,SAAZ,oBAAwB4C,OAClD,MAAOC,GACLC,QAAQC,IAAIF,GAnCH,4CAAH,sDAuCd,OACI,6BACKpI,EAAQW,SACL,kBAAC4H,EAAA,EAAD,CAAO9G,MAAOzB,EAAQU,KAAMgB,OAAQ,kBAAMzB,EAAW,MAChDD,EAAQW,SAGhBnB,EAAOmB,SACJ,kBAACa,EAAA,EAAD,CAAmBC,MAAM,UACI,aAAxBjC,EAAOmB,QAAQD,KACV,iCACA,yCAGd,kBAAC8H,GAAA,EAAD,CAAMtI,SAAUX,EAAaW,IACzB,kBAACuI,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,IAAI,WAAX,WACA,kBAAC,IAAD,CACI9G,IAAKpC,EAAS,CACVqC,UAAU,EACVK,SAAU,SAAAC,GAAK,OAAIA,EAAMrE,OAAS,OAEtC6D,YAAY,wBACZiE,GAAG,UACHxI,KAAK,UACL2E,aAAW,kBACXD,UAAU,kBAGlB,2BACIrB,KAAK,SACL0B,MAAM,qBACNL,UAAU,kBACVF,IAAKhC,MC3EV,SAAS+I,GAAT,GAAgD,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACxC7F,EAAWtD,qBAAW+C,GACtBqG,EAAYH,EAAMnL,KAAI,SAAAuL,GAAI,OAAIA,EAAK3I,YAEnC4I,EAAU,uCAAG,4BAAA7K,EAAA,sEACMJ,EAAU,kBAAD,OAAmB6K,GAAQ,GAAI,OAD9C,QACT/J,EADS,QAEJS,OACP+D,MAAM,0CAENwF,EAAShK,EAAO8J,OALL,2CAAH,qDAShB,OACI,6BACK3F,GACG,4BAAQS,QAASuF,EAAYnH,UAAU,eACnC,kBAAC,IAAD,CACI6B,KAAMuF,IACN1C,MAAM,cACN1E,UACIiH,EAAUI,SAASlG,GACb,eACA,cAGd,0BAAMnB,UAAU,mBACXiH,EAAUI,SAASlG,GAAY,OAAS,UAD7C,aAMR,kBAACmG,EAAA,EAAD,CAAOC,MAAI,EAAC7H,MAAM,QACboH,EAAM9K,SC9BR,SAASwL,KAAQ,IACpBT,EAASU,cAATV,KADmB,EAEH/I,mBAAS,IAFN,mBAEpBiI,EAFoB,KAEdyB,EAFc,OAGD1J,qBAHC,mBAGpB8I,EAHoB,KAGbE,EAHa,OAIKhJ,mBAASiI,EAAKd,UAJnB,mBAIpBA,EAJoB,KAIVa,EAJU,KAKrB7E,EAAWtD,qBAAWuD,GAc5B,OAZA4B,qBAAU,YAEO,uCAAG,8BAAA1G,EAAA,sEACWC,MAAM,kBAAD,OAAmBwK,IADnC,cACNjK,EADM,gBAESA,EAASC,OAFlB,OAENC,EAFM,OAGZ0K,EAAQ1K,GACRgK,EAAShK,EAAO8J,OAChBd,EAAYhJ,EAAOmI,UALP,2CAAH,qDAObwC,KACD,CAACZ,IAEId,EAAKrH,QAOT,yBAAKI,MAAO,CAAEQ,QAAS,SACnB,6BACI,4BAAKyG,EAAK2B,OAAOrJ,UACjB,kBAAC,IAAD,CACIoC,GAAI,CACAkH,SAAS,SAAD,OAAW5B,EAAK6B,IAAIpD,OAC5BqD,MAAO,CAAED,IAAK7B,EAAK6B,OAGvB,kBAACR,EAAA,EAAD,CAAO5H,MAAM,WAAWuG,EAAK6B,IAAIpD,QAEpCoC,GACG,kBAACD,GAAD,CACIG,SAAUA,EACVF,MAAOA,EACPC,KAAMd,EAAKc,OAGnB,4BAAQ/H,MAAO,CAAEwF,SAAU,SAAWyB,EAAK3B,MAC3C,wBAAIR,GAAG,cAAcmC,EAAKvB,QAE9B,6BACA,yBAAK1F,MAAO,CAAEY,SAAU,SAAUX,OAAQ,SACtC,yBAAK6E,GAAG,YACJ,kBAAC,IAAD,KAAWmC,EAAKrH,UAEpB,6BACCuC,EACG,kBAAC,GAAD,CAAa8E,KAAMA,EAAKnC,GAAIkC,YAAaA,IAEzC,kBAACQ,EAAA,EAAD,CAAO9G,MAAM,UAAb,qCAIJ,6BACCyF,GAAY,kBAAC,GAAD,CAAaA,SAAUA,MAzC3Cc,EAAKI,MAGF,2DAFA,kBAAC2B,EAAA,EAAD,CAAStI,MAAM,YCzBZ,SAASuI,KACpB,IAAMnK,EAAeC,mBADU,EAEYR,cAAnCG,EAFuB,EAEvBA,SAAUF,EAFa,EAEbA,aAAcC,EAFD,EAECA,OAFD,EAGDO,mBAAS,IAHR,mBAGxBC,EAHwB,KAGfC,EAHe,KAIvBmD,EAASC,cAATD,KAEFlD,EAAQ,uCAAG,WAAMC,GAAN,eAAA9B,EAAA,6DACbwB,EAAaO,QAAQC,UAAW,EADnB,SAEQpC,EAAU,sBAAuBkC,EAAM,QAF/C,YAEPpB,EAFO,QAIFS,OAJE,uBAKTK,EAAaO,QAAQC,UAAW,EAChCJ,EAAW,CACPS,KAAM,SACNC,QAAS5B,EAAOS,OAAOoB,OAAOC,KAAK9B,EAAOS,QAAQ,MAR7C,mBAUF,GAVE,OAYbK,EAAaO,QAAQC,UAAW,EAChC+C,EAAK,KAbQ,4CAAH,sDAgBd,OACI,6BACKpD,EAAQW,SACL,kBAAC4H,EAAA,EAAD,CAAO9G,MAAOzB,EAAQU,KAAMgB,OAAQ,kBAAMzB,EAAW,MAChDD,EAAQW,SAGjB,kBAAC6H,GAAA,EAAD,CACIzH,MAAO,CAAEC,OAAQ,QACjB5C,OAAO,OACP8B,SAAUX,EAAaW,IAEvB,wGAEoB,IAChB,uBACI+J,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAHR,wCAQJ,kBAAC1B,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,IAAI,SAAX,WACA,2BACIjI,KAAK,OACLsB,aAAW,QACX3E,KAAK,QACLwI,GAAG,QACHjE,YAAY,WACZG,UAAU,eACVF,IAAKpC,EAAS,CACVqC,UAAU,EACVK,SAAU,SAAAC,GAAK,OAAIA,EAAMrE,OAAS,QAGzCyB,EAAOiH,OACJ,uBAAG1E,UAAU,iBACc,aAAtBvC,EAAOiH,MAAM/F,KACR,4BACA,yCAIlB,kBAAC+H,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,IAAI,WAAX,aACA,kBAAC,IAAD,CACIjI,KAAK,OACLsB,aAAW,UACX3E,KAAK,UACLwI,GAAG,UACH9D,UAAU,eACVH,YAAY,uBACZC,IAAKpC,EAAS,CAAEqC,UAAU,IAC1BsI,KAAM,GACNrD,UAAU,SAEbvH,EAAOmB,SACJ,uBAAGoB,UAAU,iBAAb,mCAKR,2BACIrB,KAAK,SACL0B,MAAM,cACNL,UAAU,kBACVF,IAAKhC,M,kCChFV,SAASiB,GAAT,GAAwB,IAATkH,EAAQ,EAARA,KAClB5E,EAASC,cAATD,KAER,OAAQ4E,EAGJ,kBAAC/G,EAAA,EAAD,CAAKoJ,GAAG,IAAIC,GAAG,IAAIvJ,MAAO,CAAEmB,aAAc,SACtC,kBAAC4D,EAAA,EAAD,CACI/D,UAAU,YACV4B,QAAS,kBAAMP,EAAK,UAAD,OAAW4E,EAAKc,QACnCrC,MAAM,YAEN,kBAACV,EAAA,EAAD,CAAYhF,MAAO,CAAEiF,gBAAiB,YAClC,kBAACuE,GAAA,EAAD,KACI,4BAAKvC,EAAKvB,QAEd,kBAAC+D,GAAA,EAAD,YAAmBxC,EAAK2B,OAAOrJ,WAEnC,kBAACwG,EAAA,EAAD,CAAU/E,UAAU,aAChB,kBAACqE,EAAA,EAAD,CAAUrE,UAAU,gBAAgBiG,EAAKrH,UAE7C,kBAAC8J,GAAA,EAAD,CAAY1I,UAAU,oBAClB,uBAAGA,UAAU,aACT,kBAAC,IAAD,CAAMW,GAAE,iBAAYsF,EAAKc,MAAQ9G,aAAW,YACxC,kBAAC,IAAD,CAAiB4B,KAAM8G,MACvB,0BAAM3I,UAAU,mBAAhB,cAGR,kBAACqE,EAAA,EAAD,CAAUrE,UAAU,cAAciG,EAAK3B,SAxBnD,kBAAC0D,EAAA,EAAD,CAAStI,MAAM,Y,cChBjBkJ,GAAe7H,YAAS8H,MAEf,SAASC,GAAT,GAA8B,IAAD,EAATC,EAAS,EAATA,MACzBC,EAASnG,YAAU,CACrByC,KAAM,CACFxC,QAAS,EACTC,UAAW,qBAEfpC,GAAI,CACAmC,QAAS,EACTC,UAAW,qBAInB,OAAO,UAAAgG,EAAM,UAAN,eAAUnB,QACb,kBAACgB,GAAD,CAAc5J,MAAOgK,EAAQhJ,UAAU,aAClC+I,EAAMpN,KAAI,SAAAsK,GACP,OAAO,kBAAC,GAAD,CAAKA,KAAMA,EAAMN,IAAKM,EAAKnC,SAG1C,K,kCCtBO,SAASmF,GAAT,GAA0D,IAAtCC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC5D,OACI,kBAACC,GAAA,EAAD,CAAYrK,MAAO,CAAEmF,eAAgB,WAEjC,kBAACmF,GAAA,EAAD,CAAgBhL,SAA0B,IAAhB6K,EAAmBxD,IAAI,QAC7C,kBAAC4D,GAAA,EAAD,CACIC,UAAQ,EACR5H,QAAS,kBAAMsH,EAAeC,EAAc,OAInD,aAAI,IAAIM,IAAI,CAAC,EAAGN,EAAaC,KAAQzN,KAAI,SAAA+N,GACtC,OACI,kBAACJ,GAAA,EAAD,CACIK,OAAQD,IAAWP,EACnBxD,IAAK+D,EAAOE,YAEZ,kBAACL,GAAA,EAAD,CAAgB3H,QAAS,kBAAMsH,EAAeQ,KACzCA,OAMjB,kBAACJ,GAAA,EAAD,CAAgBhL,SAAU6K,IAAgBC,EAAMzD,IAAI,QAChD,kBAAC4D,GAAA,EAAD,CACIM,MAAI,EACJjI,QAAS,kBAAMsH,EAAeC,EAAc,Q,OCzBjD,SAASW,GAAT,GAAkD,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAAY,EAC7BjM,oBAAS,GADoB,mBACrDkM,EADqD,KAC1CC,EAD0C,KAEtDC,EAASvH,YAAU,CAAEwH,WAAYH,EAAY,UAAY,YACvDI,EAAMzH,YAAU,CACpByH,EAAGJ,EAAY,IAAM,IADjBI,EAGFC,EAAa1H,YAAU,CACzBE,UAAWmH,EACL,qBACA,4BACNpH,QAASoH,EAAY,EAAI,EACzBM,OAAQ,EACRhF,OAAQA,IAAOiF,OACfC,UAAW,SAAA/E,GAAG,MAAY,WAARA,KAStB,OACI,yBAAK3F,UAAU,mBACX,kBAAC,IAAS2K,OAAV,CACI3L,MAAOoL,EACPQ,cAAY,SACZ5K,UAAU,gBACV4B,QAAS,kBAAMuI,GAAWD,KAE1B,yBAAKlK,UAAU,SACX,uBAAGA,UAAU,mBAAb,uBACA,2BAAIiK,GACJ,kBAAC,IAASY,EAAV,CACI7L,MAAO,CACH+D,UAAWuH,EAAEQ,aAAY,SAAAR,GAAC,wBAAeA,EAAf,aAG7BJ,EAAY,IAAM,YAI/B,kBAAC,IAASrE,IAAV,CAAc7G,MAAOuL,EAAY/E,OAAQA,IAAOC,QAC3CyE,GACG,yBAAKlK,UAAU,iBACV+J,EAAQpO,KAAI,SAAAoP,GAAM,OACf,yBACInJ,QAAS,kBA/Bb,SAAAmJ,GAEpBC,YAAW,kBAAMb,GAAU,KAAQ,KACnCH,EAAUe,GA4B6BE,CAAgBF,IAC/BpF,IAAKoF,EAAO,IAEZ,gCAASA,EAAO,WCjDjC,SAASG,KAAQ,IAAD,EACDlN,mBAAS,MADR,mBACpB+K,EADoB,KACboC,EADa,OAEWnN,mBAAS,GAFpB,mBAEpBmL,EAFoB,KAEPD,EAFO,OAGClL,mBAAS,CAAC,QAAS,WAHpB,mBAGpBoN,EAHoB,KAGZpB,EAHY,KAO3BhH,qBAAU,WACNmI,EAAS,IACK,uCAAG,8BAAA7O,EAAA,sEACUC,MAAM,8BAAD,OACM4M,EADN,iBAC0BiC,EAAO,GADjC,wBADf,cACPtO,EADO,gBAIQA,EAASC,OAJjB,OAIPC,EAJO,OAKbmO,EAASnO,GALI,2CAAH,oDAOdqO,KACD,CAAClC,EAAaiC,IASjB,OAAiB,OAAVrC,EACH,kBAACf,EAAA,EAAD,CAAStI,MAAM,YAEf,yBAAKV,MAAO,CAAE8G,SAAU,WACpB,wBAAI9G,MAAO,CAAEsM,UAAW,WAAxB,QACA,kBAAC,GAAD,CACIvB,QAbI,CACZ,CAAC,QAAS,UACV,CAAC,OAAQ,UACT,CAAC,SAAU,cACX,CAAC,QAAS,gBAUFC,UAAWA,EACXC,SAAUmB,EAAO,KAEpBrC,EAAMwC,QACH,oCACI,kBAACzC,GAAD,CAAUC,MAAOA,EAAMwC,UACvB,kBAACtC,GAAD,CACIE,YAAaA,EACbC,KAAML,EAAMyC,MACZtC,eAAgBA,KAIxB,kBAAClB,EAAA,EAAD,CAAStI,MAAM,a,wBC1ChB,SAASX,GAAT,GAAuB,IAAR+I,EAAO,EAAPA,IAC1B,OACI,kBAAC/D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYhF,MAAO,CAAEiF,gBAAiB,YAClC,kBAACuE,GAAA,EAAD,KACI,4BAAKV,EAAIpD,QAEb,kBAAC+D,GAAA,EAAD,KACI,uBAAGzJ,MAAO,CAAEwF,SAAU,WAAtB,QAAwCsD,EAAIxD,QAGpD,kBAACS,EAAA,EAAD,CAAU/F,MAAO,CAAEiF,gBAAiB,YAChC,kBAACI,EAAA,EAAD,KAAWyD,EAAI2D,eCjBhB,SAASC,GAAT,GAA4B,IAATC,EAAQ,EAARA,KACxBC,EAAcvG,YAAcsG,GAAM,SAAA7D,GAAG,OAAIA,EAAIhE,KAAI,CACnDwB,KAAM,CACFvC,UAAW,gCAEfwC,MAAO,CACHxC,UAAW,+BAInB,OACI,kBAAC8I,GAAA,EAAD,KACKD,EAAYjQ,KAAI,gBAAG+J,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKC,EAAd,EAAcA,MAAd,OACb,kBAAC,IAASC,IAAV,CAAc7G,MAAO4G,EAAOD,IAAKA,GAC7B,kBAAC,GAAD,CAAKmC,IAAKpC,SCdf,SAASoG,GAAT,GAAsD,IAApCC,EAAmC,EAAnCA,UAAWpN,EAAwB,EAAxBA,KAAMuK,EAAkB,EAAlBA,eAAkB,EAC7B3L,cAA3BG,EADwD,EACxDA,SAAUF,EAD8C,EAC9CA,aAQlB,OACI,kBAACiJ,GAAA,EAAD,CACItI,SAAUX,GARD,SAAAY,GACb2N,EAAU3N,EAAK4N,QAEf9C,EAAe,MAMXlK,MAAO,CAAEQ,QAAS,YAAayM,cAAe,QAE9C,kBAACtF,GAAA,EAAD,CAAOC,IAAI,UAAX,iBAAmCjI,GACnC,2BACIqB,UAAU,eACVH,YAAY,kCACZlB,KAAK,OACLrD,KAAK,SACLwI,GAAG,SACHhE,IAAKpC,EACLsB,MAAO,CAAEmB,aAAc,UAE3B,2BAAOH,UAAU,kBAAkBK,MAAM,SAAS1B,KAAK,Y,MCxBpD,SAASuN,GAAT,GAAmD,IAA3BvN,EAA0B,EAA1BA,KAAMwN,EAAoB,EAApBA,iBAAoB,EACxCtJ,YAAU,CAC3BuJ,EAAY,SAATzN,EAAkB,IAAM,EAC3Be,MAAgB,SAATf,EAAkB,QAAU,QACnC6G,OAAO,eAAMA,IAAO6G,SAAd,CAAwBC,SAAU,OAHpCF,EADqD,EACrDA,EAAG1M,EADkD,EAClDA,MAMX,OACI,kBAAC6E,EAAA,EAAD,CACI7E,MAAM,UACNM,UAAU,0BACV4B,QAASuK,EACTnN,MAAO,CACHuN,YAAsB,SAAT5N,GAAmB,YAGpC,kBAAC,IAAS6N,KAAV,CAAexN,MAAO,CAAEU,SAASM,UAAU,oBACtCrB,EAAK8N,OAAO,GAAGC,cAAgB/N,EAAKgO,MAAM,IAE/C,kBAAC,IAAS9G,IAAV,CACI7F,UAAU,kBACVhB,MAAO,CACH+D,UAAWqJ,EAAEtB,aAAY,SAAAsB,GAAC,4BAAmBA,EAAnB,aChB/B,SAASQ,KAAY,IAAD,IACT5O,mBAAQ,UAAC6O,cAAc9E,aAAf,aAAC,EAAqBD,KADrB,mBACxBA,EADwB,KACnBgF,EADmB,OAEH9O,mBAAS,CAAC,QAAS,WAFhB,mBAExBoN,EAFwB,KAEhBpB,EAFgB,OAGLhM,mBAAS,IAHJ,mBAGxB+O,EAHwB,KAGjBC,EAHiB,OAIOhP,mBAAS,GAJhB,mBAIxBmL,EAJwB,KAIXD,EAJW,OAKPlL,mBAAS,SALF,mBAKxBW,EALwB,KAKlBsO,EALkB,OAMHjP,mBAAS,IANN,mBAMxBgO,EANwB,KAMhBD,EANgB,KAOvBrH,EAAU+C,cAAV/C,MAER1B,qBAAU,WACN,GAAI8E,EAAK,OAAO,cACJ,uCAAG,8BAAAxL,EAAA,sEACYC,MAAM,yBAAD,OAA0BmI,IAD3C,cACL5H,EADK,gBAEUA,EAASC,OAFnB,OAELC,EAFK,OAGX8P,EAAO9P,GAHI,2CAAH,qDAKZkQ,KACD,CAACxI,EAAOoD,IAGX9E,qBAAU,WAEN,GADAgK,EAAS,KACJlF,EAAK,OAAO,cACH,uCAAG,8BAAAxL,EAAA,sEACUC,MAAM,uBAAD,OACDuL,EAAIhE,GADH,iBACcsH,EAAO,GADrB,iBACgCjC,EADhC,iBACoDxK,EADpD,mBACmEqN,IAFlF,cACPlP,EADO,gBAIQA,EAASC,OAJjB,OAIPC,EAJO,OAKbgQ,EAAShQ,GACTsJ,QAAQC,IAAIvJ,GANC,2CAAH,qDAQdmQ,KACD,CAACrF,EAAKqB,EAAaxK,EAAMqN,EAAQZ,IAEpC,IAQMrB,EAAU,CACZ,CAAC,QAAS,UACV,CAAC,OAAQ,WAMb,MAHa,UAATpL,GACAoL,EAAQ1I,KAAK,CAAC,SAAU,cAAe,CAAC,QAAS,gBAE7CyG,EAGJ,yBAAK9I,MAAO,CAAE8G,SAAU,WACpB,kBAACsH,GAAA,EAAD,KACI,wBAAIpN,UAAU,sBAAsB0E,GACpC,uBAAG1E,UAAU,QAAQ8H,EAAI2D,aACzB,wBAAIzL,UAAU,SACd,kBAACkM,GAAD,CAAcvN,KAAMA,EAAMwN,iBAxBb,WACrBc,EAAiB,UAATtO,EAAmB,OAAS,SAEpCqL,EAAU,CAAC,QAAS,WAEpBd,EAAe,OAqBX,kBAAC4C,GAAD,CACIC,UAAWA,EACXpN,KAAMA,EACNuK,eAAgBA,IAEpB,kBAAC,GAAD,CACIa,QAASA,EACTC,UAAWA,EACXC,SAAUmB,EAAO,KAEpB2B,EAAMxB,QACM,UAAT5M,EACI,oCACI,kBAACmK,GAAD,CAAUC,MAAOgE,EAAMxB,UACvB,kBAACtC,GAAD,CACIE,YAAaA,EACbC,KAAM2D,EAAMvB,MACZtC,eAAgBA,KAIxB,kBAACwC,GAAD,CAASC,KAAMoB,EAAMxB,UAGzB,kBAACvD,EAAA,EAAD,CAAStI,MAAM,aAjCvB,kBAACsI,EAAA,EAAD,CAAStI,MAAM,Y,OChDR,SAAS2N,KAAO,IAAD,EACMrP,wBAASsP,GADf,mBACnBnM,EADmB,KACToM,EADS,KAa1B,OAVAvK,qBAAU,WACN,QAAiBsK,IAAbnM,EAAwB,OAAO,cACtB,uCAAG,gCAAA7E,EAAA,sEACWC,MAAM,oBADjB,cACNO,EADM,gBAEWA,EAASC,OAFpB,gBAEJmK,EAFI,EAEJA,KACRqG,EAAYrG,GAHA,2CAAH,qDAKbsG,KACD,CAACrM,IAGA,kBAAC,IAAD,KACI,kBAACN,EAAD,CAAkBR,MAAOc,GACrB,kBAAC/D,EAAD,CAAwBiD,MAAOkN,GAC3B,kBAAClL,EAAD,KACI,yBAAKrC,UAAU,MAAMhB,MAAO,CAAEkB,UAAW,SACrC,kBAAC,IAAD,CAAOuN,KAAK,IAAIC,OAAK,EAACC,UAAWzC,KACjC,kBAAC,IAAD,CACIuC,KAAK,YACLC,OAAK,EACLC,UAAW,kBACPxM,EACI,kBAAC,IAAD,CAAUR,GAAG,MAEb,kBAACrD,EAAD,SAIZ,kBAAC,IAAD,CACImQ,KAAK,SACLC,OAAK,EACLC,UAAW,kBACPxM,EAAW,kBAAC,IAAD,CAAUR,GAAG,MAAS,kBAACL,EAAD,SAGzC,kBAAC,IAAD,CACImN,KAAK,YACLC,OAAK,EACLC,UAAW,kBACPxM,EACI,kBAAC8G,GAAD,MAEA,kBAAC,IAAD,CAAUtH,GAAG,cAIzB,kBAAC,IAAD,CAAO8M,KAAK,eAAeC,OAAK,EAACC,UAAWnG,KAC5C,kBAAC,IAAD,CAAOiG,KAAK,eAAeC,OAAK,EAACC,UAAWC,UCpDpDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACf,GAAD,OAEF9R,SAAS8S,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvI,GACLC,QAAQD,MAAMA,EAAMpI,a,4HEzI5B4Q,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.9ad02c6d.chunk.js","sourcesContent":["function getCookie(name) {\r\n    if (!document.cookie) {\r\n        return null;\r\n    }\r\n    const token = document.cookie\r\n        .split(\";\")\r\n        .map(c => c.trim())\r\n        .filter(c => c.startsWith(name + \"=\"));\r\n\r\n    if (token.length === 0) {\r\n        return null;\r\n    }\r\n    return decodeURIComponent(token[0].split(\"=\")[1]);\r\n}\r\n\r\nexport async function fetchCsrf(url, body, method) {\r\n    const response = await fetch(url, {\r\n        method: method,\r\n        mode: \"same-origin\",\r\n        credentials: \"include\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n","import React from 'react';\r\n\r\nconst ToggleLoggedinContext = React.createContext({});\r\nexport const ToggleLoggedinProvider = ToggleLoggedinContext.Provider;\r\n\r\nexport default ToggleLoggedinContext;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { useForm } from 'react-hook-form';\r\nimport ToggleLoggedinContext from './ToggleLoginContext';\r\nimport { Col, UncontrolledAlert, Row } from 'reactstrap';\r\n\r\nimport ShareImage from '../../images/undraw_share_online_r87b.svg';\r\nimport '../../style/auth.css';\r\n\r\nexport default function Register() {\r\n    const { handleSubmit, errors, register, watch } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n    const submitButton = useRef();\r\n    const [message, setMessage] = useState({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        if (\r\n            data.username.length <= 0 ||\r\n            data.password.length <= 0 ||\r\n            data.confirm.length <= 0 ||\r\n            data.email.length <= 0\r\n        ) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            return false;\r\n        } else if (data.password !== data.confirm) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'Password and confirm fields must match!',\r\n            });\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/register', data, 'POST');\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px' }}>\r\n            <Col md=\"12\">\r\n                <h4>Welcome! Register to interact with other users.</h4>\r\n                <img\r\n                    src={ShareImage}\r\n                    alt=\"Share online\"\r\n                    style={{ width: '40vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    style={{\r\n                        padding: '10px',\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                    }}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"form-control input\"\r\n                        name=\"email\"\r\n                        aria-label=\"email\"\r\n                        ref={register({ required: true })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.email && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the email!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value === watch('confirm'),\r\n                        })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            {errors.password.type === 'required'\r\n                                ? 'Remember to fill out the password!'\r\n                                : 'Password and confirm fields must match!'}\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        className=\"form-control input\"\r\n                        name=\"confirm\"\r\n                        ref={register({ required: true })}\r\n                        aria-label=\"confirm\"\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.confirm && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the confirm password!\r\n                        </p>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Register\"\r\n                        aria-label=\"register\"\r\n                        ref={submitButton}\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useState, useContext, useRef } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { Link } from 'react-router-dom';\r\nimport { UncontrolledAlert, Row, Col } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport loginImage from '../../images/undraw_Login_re_4vu2.svg';\r\nimport ToggleLoggedinContext from './ToggleLoginContext';\r\n\r\nexport default function Login() {\r\n    const [message, setMessage] = useState({});\r\n    const submitInput = useRef();\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n\r\n    const onSubmit = async data => {\r\n        submitInput.current.disabled = true;\r\n        if (data.username.length <= 0 || data.password.length <= 0) {\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/login', data, 'POST');\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        submitInput.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px', height: '100%' }}>\r\n            <Col md=\"12\">\r\n                <h4>\r\n                    Welcome back! Login to start interacting with other users\r\n                </h4>\r\n                <img\r\n                    src={loginImage}\r\n                    alt=\"login\"\r\n                    style={{ width: '50vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    style={{\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                        minWidth: '0px',\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the password!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Login\"\r\n                        ref={submitInput}\r\n                        aria-label=\"login\"\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                    <footer>\r\n                        <small>\r\n                            Don't have an account? Register{' '}\r\n                            <Link to=\"/register\">here</Link>\r\n                        </small>\r\n                    </footer>\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst LoggedinContext = React.createContext({});\r\nexport const LoggedinProvider = LoggedinContext.Provider;\r\n\r\nexport default LoggedinContext;\r\n","import React, { useContext } from 'react';\r\nimport LoggedInContext from '../Auth/LoggedInContext';\r\nimport { Nav, NavItem } from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHome,\r\n    faPlus,\r\n    faSignInAlt,\r\n    faSignOutAlt,\r\n    faUser,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ToggleLoggedinContext from '../Auth/ToggleLoginContext';\r\nimport { animated } from 'react-spring';\r\nimport '../../style/navbar.css';\r\n\r\nconst AnimatedNav = animated(Nav);\r\n\r\nexport default function SidebarContent({ toggleSidebar, style }) {\r\n    const loggedIn = useContext(LoggedInContext);\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n    const { push } = useHistory();\r\n\r\n    const logout = async () => {\r\n        const response = await fetch('/knowledge/logout');\r\n        const result = await response.json();\r\n        if (result.errors) {\r\n            alert('An error has occured');\r\n            return;\r\n        }\r\n        alert('Logged out successfully!');\r\n        handleLogin(null);\r\n        toggleSidebar();\r\n    };\r\n\r\n    const navigate = route => {\r\n        push(route);\r\n        toggleSidebar();\r\n    };\r\n\r\n    //Generate the routes based on whether the user is logged in or not\r\n    const routes = [\r\n        {\r\n            onClick: () => navigate('/'),\r\n            icon: faHome,\r\n            name: 'Home',\r\n        },\r\n    ];\r\n    loggedIn\r\n        ? routes.push(\r\n              {\r\n                  onClick: () => navigate('/new/post'),\r\n                  icon: faPlus,\r\n                  name: 'New Post',\r\n              },\r\n              {\r\n                  onClick: logout,\r\n                  icon: faSignOutAlt,\r\n                  name: 'Logout',\r\n              }\r\n          )\r\n        : routes.push(\r\n              {\r\n                  onClick: () => navigate('/login'),\r\n                  icon: faSignInAlt,\r\n                  name: 'Login',\r\n              },\r\n              {\r\n                  onClick: () => navigate('/register'),\r\n                  icon: faUser,\r\n                  name: 'Register',\r\n              }\r\n          );\r\n\r\n    return (\r\n        <AnimatedNav vertical style={style} className=\"navnav\">\r\n            <h3>Share</h3>\r\n            <hr />\r\n            {routes.map(route => (\r\n                <NavItem>\r\n                    <button\r\n                        onClick={route.onClick}\r\n                        className=\"navnavbutton navnavlink\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={route.icon}\r\n                            className=\"navnavitem\"\r\n                        />\r\n                        <p className=\"navnavtext\">{route.name}</p>\r\n                    </button>\r\n                </NavItem>\r\n            ))}\r\n        </AnimatedNav>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport SidebarContent from './SidebarContent';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './../../style/navbar.css';\r\nimport { useSpring } from 'react-spring';\r\n\r\nexport default function Sidebar({ children }) {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [theme, setTheme] = useState(localStorage.getItem('theme'));\r\n    const content = useSpring({\r\n        opacity: !collapsed ? 1 : 0,\r\n        transform: !collapsed ? 'translateX(0%)' : 'translateX(-110%)',\r\n    });\r\n\r\n    const toggleSidebar = () => setCollapsed(!collapsed);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', theme);\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n    }, [theme]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"navnavbar\">\r\n                <button\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={toggleSidebar}\r\n                    className=\"navnavicon\"\r\n                >\r\n                    <FontAwesomeIcon icon={faBars} />\r\n                </button>\r\n                <button\r\n                    className=\"theme navnavicon\"\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={() =>\r\n                        setTheme(theme === 'dark' ? 'light' : 'dark')\r\n                    }\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"theme\"\r\n                        icon={theme === 'dark' ? faSun : faMoon}\r\n                    />\r\n                </button>\r\n            </div>\r\n            <SidebarContent toggleSidebar={toggleSidebar} style={content} />\r\n            <div\r\n                style={{ filter: !collapsed && 'blur(5px)' }}\r\n                onClick={!collapsed ? () => setCollapsed(true) : () => {}}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { Card, CardHeader, CardText, CardBody, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faEdit,\r\n    faSave,\r\n    faWindowClose,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport TextArea from 'react-autosize-textarea';\r\nimport Markdown from 'react-markdown';\r\nimport LoggedinContext from '../Auth/LoggedInContext';\r\nimport '../../style/post.css';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\n\r\nexport default function Comment({ comment }) {\r\n    const loggedIn = useContext(LoggedinContext);\r\n    const editCommentContent = useRef();\r\n    const [content, setContent] = useState(comment.content);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const editComment = async () => {\r\n        if (editCommentContent.current) {\r\n            const { value } = editCommentContent.current;\r\n            if (value.length > 256) {\r\n                alert('Comment must be less than 256 characters long');\r\n                return;\r\n            }\r\n            setContent(value);\r\n            const result = await fetchCsrf(\r\n                `/knowledge/comment/${comment.id}`,\r\n                { content: value },\r\n                'PUT'\r\n            );\r\n            if (result.errors) {\r\n                alert(result.errors[Object.keys(result.errors)[0]]);\r\n            }\r\n        }\r\n        setEditing(!editing);\r\n    };\r\n    return (\r\n        <Card style={{ margin: '20px', height: 'auto' }}>\r\n            <CardHeader\r\n                style={{\r\n                    backgroundColor: 'rgb(203, 223, 230)',\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <div>\r\n                    <h4>@{comment.commenter.username}</h4>\r\n                    <CardText className=\"text-muted\">{comment.date}</CardText>\r\n                </div>\r\n                {comment.commenter.username === loggedIn && (\r\n                    <div>\r\n                        {editing && (\r\n                            <Button\r\n                                color=\"danger\"\r\n                                style={{ fontSize: '0.9rem' }}\r\n                                outline\r\n                                title=\"Cancel\"\r\n                                onClick={() => setEditing(false)}\r\n                            >\r\n                                <span className=\"visually-hidden\">cancel</span>\r\n                                <FontAwesomeIcon icon={faWindowClose} />\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            color={editing ? 'success' : 'primary'}\r\n                            style={{ marginLeft: '10px', fontSize: '0.9rem' }}\r\n                            outline\r\n                            title={editing ? 'Save' : 'Edit'}\r\n                            disabled={\r\n                                editCommentContent.current &&\r\n                                editCommentContent.current.length < 1\r\n                            }\r\n                            onClick={() => editComment()}\r\n                        >\r\n                            <span className=\"visually-hidden\">\r\n                                {editing ? 'save' : 'edit'}\r\n                            </span>\r\n                            <FontAwesomeIcon icon={editing ? faSave : faEdit} />\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </CardHeader>\r\n            <CardBody style={{ backgroundColor: 'rgb(215, 245, 255)' }}>\r\n                {editing ? (\r\n                    <TextArea\r\n                        className=\"edit-comment\"\r\n                        ref={editCommentContent}\r\n                        maxLength=\"256\"\r\n                    >\r\n                        {content}\r\n                    </TextArea>\r\n                ) : (\r\n                    <Markdown\r\n                        style={{\r\n                            whiteSpcae: 'preWrap',\r\n                            marginTop: '0px',\r\n                            marginBottom: '1rem',\r\n                        }}\r\n                    >\r\n                        {content}\r\n                    </Markdown>\r\n                )}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\nimport { useTransition, animated, config } from 'react-spring';\r\n\r\nexport default function List({ comments }) {\r\n    const transition = useTransition(comments, comment => comment.id, {\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translateX(-100px)',\r\n        },\r\n        enter: { opacity: 1, transform: 'translateX(0px)' },\r\n        config: config.wobbly,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {transition.map(({ item, key, props }) => (\r\n                <animated.div\r\n                    style={{ ...props, overflow: 'hidden' }}\r\n                    key={key}\r\n                >\r\n                    <Comment comment={item} />\r\n                </animated.div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Form, FormGroup, Label, UncontrolledAlert, Alert } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function New({ setComments, post }) {\r\n    const { register, handleSubmit, reset, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const submitButton = useRef();\r\n\r\n    const onSubmit = async data => {\r\n        //Disable button to prevent submitting twice\r\n        submitButton.current.disabled = true;\r\n\r\n        if (data.content.length < 1) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'You must fill out the comment!',\r\n            });\r\n            submitButton.current.disabled = false;\r\n            return;\r\n        }\r\n        const formData = {\r\n            content: data.content,\r\n            post: post,\r\n        };\r\n        const result = await fetchCsrf('/knowledge/comment', formData, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n        } else {\r\n            setMessage({\r\n                type: 'success',\r\n                content: 'Comment posted successfully.',\r\n            });\r\n            reset();\r\n        }\r\n        submitButton.current.disabled = false;\r\n        //Add comment to comment lists\r\n        try {\r\n            setComments(prevComments => [result.comment, ...prevComments]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            {errors.content && (\r\n                <UncontrolledAlert color=\"danger\">\r\n                    {errors.content.type === 'required'\r\n                        ? 'You must fill out the comment!'\r\n                        : 'Comment must be under 257 characters!'}\r\n                </UncontrolledAlert>\r\n            )}\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content</Label>\r\n                    <TextArea\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 257,\r\n                        })}\r\n                        placeholder=\"A valuable comment...\"\r\n                        id=\"content\"\r\n                        name=\"content\"\r\n                        aria-label=\"Comment content\"\r\n                        className=\"form-control\"\r\n                    />\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Share your comment\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Badge } from 'reactstrap';\r\nimport LoggedinContext from '../Auth/LoggedInContext';\r\nimport '../../style/post.css';\r\n\r\nexport default function LikeButton({ likes, uuid, setLikes }) {\r\n    const loggedIn = useContext(LoggedinContext);\r\n    const usernames = likes.map(user => user.username);\r\n\r\n    const handleLike = async () => {\r\n        const result = await fetchCsrf(`knowledge/post/${uuid}`, {}, 'PUT');\r\n        if (result.errors) {\r\n            alert('An error has occured. Try again later.');\r\n        } else {\r\n            setLikes(result.likes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn && (\r\n                <button onClick={handleLike} className=\"like-button\">\r\n                    <FontAwesomeIcon\r\n                        icon={faHeart}\r\n                        title=\"like button\"\r\n                        className={\r\n                            usernames.includes(loggedIn)\r\n                                ? 'dislike-icon'\r\n                                : 'like-icon'\r\n                        }\r\n                    />\r\n                    <span className=\"visually-hidden\">\r\n                        {usernames.includes(loggedIn) ? 'Like' : 'Dislike'}\r\n                        the post\r\n                    </span>\r\n                </button>\r\n            )}\r\n            <Badge pill color=\"info\">\r\n                {likes.length}\r\n            </Badge>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Alert, Badge, Spinner } from 'reactstrap';\r\nimport Markdown from 'react-markdown';\r\nimport CommentList from '../Comment/List';\r\nimport CommentForm from '../Comment/New';\r\nimport LoggedInContext from '../Auth/LoggedInContext';\r\nimport LikeButton from './Like';\r\n\r\nimport '../../style/post.css';\r\n\r\nexport default function Post() {\r\n    const { uuid } = useParams();\r\n    const [post, setPost] = useState({});\r\n    const [likes, setLikes] = useState();\r\n    const [comments, setComments] = useState(post.comments);\r\n    const loggedIn = useContext(LoggedInContext);\r\n\r\n    useEffect(() => {\r\n        //get the post and set the comments\r\n        const getPost = async () => {\r\n            const response = await fetch(`knowledge/post/${uuid}`);\r\n            const result = await response.json();\r\n            setPost(result);\r\n            setLikes(result.likes);\r\n            setComments(result.comments);\r\n        };\r\n        getPost();\r\n    }, [uuid]);\r\n\r\n    return !post.content ? (\r\n        !post.error ? (\r\n            <Spinner color=\"primary\" />\r\n        ) : (\r\n            <h2>This post couldn't be found</h2>\r\n        )\r\n    ) : (\r\n        <div style={{ padding: '25px' }}>\r\n            <div>\r\n                <h4>{post.poster.username}</h4>\r\n                <Link\r\n                    to={{\r\n                        pathname: `/hubs/${post.hub.title}`,\r\n                        state: { hub: post.hub },\r\n                    }}\r\n                >\r\n                    <Badge color=\"primary\">{post.hub.title}</Badge>\r\n                </Link>\r\n                {likes && (\r\n                    <LikeButton\r\n                        setLikes={setLikes}\r\n                        likes={likes}\r\n                        uuid={post.uuid}\r\n                    />\r\n                )}\r\n                <footer style={{ fontSize: '12px' }}>{post.date}</footer>\r\n                <h2 id=\"post-title\">{post.title}</h2>\r\n            </div>\r\n            <hr />\r\n            <div style={{ maxWidth: '1024px', margin: 'auto' }}>\r\n                <div id=\"post-div\">\r\n                    <Markdown>{post.content}</Markdown>\r\n                </div>\r\n                <hr />\r\n                {loggedIn ? (\r\n                    <CommentForm post={post.id} setComments={setComments} />\r\n                ) : (\r\n                    <Alert color=\"danger\">\r\n                        You must be logged in to comment!\r\n                    </Alert>\r\n                )}\r\n                <hr />\r\n                {comments && <CommentList comments={comments} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FormGroup, Form, Label, Alert } from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function PostForm() {\r\n    const submitButton = useRef();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const { push } = useHistory();\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        const result = await fetchCsrf('/knowledge/new/post', data, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = true;\r\n        push('/');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            <Form\r\n                style={{ margin: '10px' }}\r\n                method=\"POST\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n                <h6>\r\n                    In here you make a new post. The content will be rendered\r\n                    using markdown.{' '}\r\n                    <a\r\n                        href=\"https://www.markdowntutorial.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        What is markdown and how to use it.\r\n                    </a>\r\n                </h6>\r\n                <FormGroup>\r\n                    <Label for=\"title\">Title: </Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        aria-label=\"title\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Title...\"\r\n                        className=\"form-control\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 65,\r\n                        })}\r\n                    />\r\n                    {errors.title && (\r\n                        <p className=\"error-message\">\r\n                            {errors.title.type === 'required'\r\n                                ? 'You must provide a title!'\r\n                                : 'Title must be 64 characters at most!'}\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content: </Label>\r\n                    <TextArea\r\n                        type=\"text\"\r\n                        aria-label=\"content\"\r\n                        name=\"content\"\r\n                        id=\"content\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Some good content...\"\r\n                        ref={register({ required: true })}\r\n                        rows={20}\r\n                        maxLength=\"2050\"\r\n                    />\r\n                    {errors.content && (\r\n                        <p className=\"error-message\">\r\n                            You must provide some content!\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Create post\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    CardSubtitle,\r\n    Col,\r\n    CardHeader,\r\n    CardFooter,\r\n    Spinner,\r\n} from 'reactstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../style/post.css';\r\n\r\nexport default function Row({ post }) {\r\n    const { push } = useHistory();\r\n\r\n    return !post ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <Col lg=\"6\" xl=\"4\" style={{ marginBottom: '30px' }}>\r\n            <Card\r\n                className=\"post-card\"\r\n                onClick={() => push(`/posts/${post.uuid}`)}\r\n                title=\"See more\"\r\n            >\r\n                <CardHeader style={{ backgroundColor: '#68d8ee' }}>\r\n                    <CardTitle>\r\n                        <h5>{post.title}</h5>\r\n                    </CardTitle>\r\n                    <CardSubtitle>By: {post.poster.username}</CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody className=\"back-blue\">\r\n                    <CardText className=\"post-content\">{post.content}</CardText>\r\n                </CardBody>\r\n                <CardFooter className=\"footer back-blue\">\r\n                    <p className=\"card-link\">\r\n                        <Link to={`/posts/${post.uuid}`} aria-label=\"see more\">\r\n                            <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                            <span className=\"visually-hidden\">See more</span>\r\n                        </Link>\r\n                    </p>\r\n                    <CardText className=\"text-muted\">{post.date}</CardText>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from './Row';\r\nimport { CardDeck } from 'reactstrap';\r\nimport { animated, useSpring } from 'react-spring';\r\n\r\nconst AnimatedDeck = animated(CardDeck);\r\n\r\nexport default function PostList({ posts }) {\r\n    const styles = useSpring({\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translateX(100px)',\r\n        },\r\n        to: {\r\n            opacity: 1,\r\n            transform: 'translateX(0px)',\r\n        },\r\n    });\r\n    //Handle no posts, temporal fix as for the poster, handle the type rerender before the itemss update\r\n    return posts[0]?.poster ? (\r\n        <AnimatedDeck style={styles} className=\"post-list\">\r\n            {posts.map(post => {\r\n                return <Row post={post} key={post.id} />;\r\n            })}\r\n        </AnimatedDeck>\r\n    ) : null;\r\n}\r\n","import React from 'react';\r\nimport { PaginationItem, PaginationLink, Pagination } from 'reactstrap';\r\n\r\nexport default function Paginate({ setCurrentPage, currentPage, last }) {\r\n    return (\r\n        <Pagination style={{ justifyContent: 'center' }}>\r\n            {/* Make sure current page isn't the first to disable it */}\r\n            <PaginationItem disabled={currentPage === 1} key=\"prev\">\r\n                <PaginationLink\r\n                    previous\r\n                    onClick={() => setCurrentPage(currentPage - 1)}\r\n                />\r\n            </PaginationItem>\r\n            {/*Make the list of pages uniqui in case the active one is first or last by making the list a set and then a list again*/}\r\n            {[...new Set([1, currentPage, last])].map(number => {\r\n                return (\r\n                    <PaginationItem\r\n                        active={number === currentPage}\r\n                        key={number.toString()}\r\n                    >\r\n                        <PaginationLink onClick={() => setCurrentPage(number)}>\r\n                            {number}\r\n                        </PaginationLink>\r\n                    </PaginationItem>\r\n                );\r\n            })}\r\n            {/* Make sure current page isn't the last to disable it */}\r\n            <PaginationItem disabled={currentPage === last} key=\"next\">\r\n                <PaginationLink\r\n                    next\r\n                    onClick={() => setCurrentPage(currentPage + 1)}\r\n                />\r\n            </PaginationItem>\r\n        </Pagination>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSpring, animated, config } from 'react-spring';\r\n\r\nimport '../../style/dropdown.css';\r\n\r\nexport default function Radio({ options, setSortBy, selected }) {\r\n    const [isToggled, setToggle] = useState(false);\r\n    const menubg = useSpring({ background: isToggled ? '#68d8ee' : '#8ee4f5' });\r\n    const { y } = useSpring({\r\n        y: isToggled ? 180 : 0,\r\n    });\r\n    const menuAppear = useSpring({\r\n        transform: isToggled\r\n            ? 'translate3D(0,0,0)'\r\n            : 'translate3D(0,-40px,50px)',\r\n        opacity: isToggled ? 1 : 0,\r\n        zIndex: 2,\r\n        config: config.gentle,\r\n        immediate: key => key === 'zIndex',\r\n    });\r\n\r\n    const handleSetOption = option => {\r\n        //Wait for items to disappear before toggle\r\n        setTimeout(() => setToggle(false), 0.01);\r\n        setSortBy(option);\r\n    };\r\n\r\n    return (\r\n        <div className=\"radio-container\">\r\n            <animated.button\r\n                style={menubg}\r\n                data-testid=\"toggle\"\r\n                className=\"radio-wrapper\"\r\n                onClick={() => setToggle(!isToggled)}\r\n            >\r\n                <div className=\"radio\">\r\n                    <p className=\"visually-hidden\">Change sort options</p>\r\n                    <p>{selected}</p>\r\n                    <animated.p\r\n                        style={{\r\n                            transform: y.interpolate(y => `rotateX(${y}deg)`),\r\n                        }}\r\n                    >\r\n                        {isToggled ? 'X' : '▼'}\r\n                    </animated.p>\r\n                </div>\r\n            </animated.button>\r\n            <animated.div style={menuAppear} config={config.wobbly}>\r\n                {isToggled && (\r\n                    <div className=\"radio-content\">\r\n                        {options.map(option => (\r\n                            <div\r\n                                onClick={() => handleSetOption(option)}\r\n                                key={option[0]}\r\n                            >\r\n                                <button>{option[1]}</button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport PostList from './Post/List';\r\nimport { Spinner } from 'reactstrap';\r\nimport Paginate from './Pagination';\r\nimport Dropdown from './General/Dropdown';\r\n\r\nexport default function Home() {\r\n    const [posts, setPosts] = useState(null);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n\r\n    //get the posts for a page\r\n\r\n    useEffect(() => {\r\n        setPosts({});\r\n        const getPosts = async () => {\r\n            const response = await fetch(\r\n                `knowledge/hub/items/1?page=${currentPage}&sort=${sortBy[0]}&type=posts&search=`\r\n            );\r\n            const result = await response.json();\r\n            setPosts(result);\r\n        };\r\n        getPosts();\r\n    }, [currentPage, sortBy]);\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n        ['-likes', 'Most Liked'],\r\n        ['likes', 'Least liked'],\r\n    ];\r\n\r\n    return posts === null ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <h3 style={{ textAlign: 'center' }}>Home</h3>\r\n            <Dropdown\r\n                options={options}\r\n                setSortBy={setSortBy}\r\n                selected={sortBy[1]}\r\n            />\r\n            {posts.results ? (\r\n                <>\r\n                    <PostList posts={posts.results} />\r\n                    <Paginate\r\n                        currentPage={currentPage}\r\n                        last={posts.total}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <Spinner color=\"primary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    CardText,\r\n    CardHeader,\r\n    CardBody,\r\n    CardSubtitle,\r\n} from 'reactstrap';\r\n\r\nexport default function Row({ hub }) {\r\n    return (\r\n        <Card>\r\n            <CardHeader style={{ backgroundColor: '#91ffa0' }}>\r\n                <CardTitle>\r\n                    <h5>{hub.title}</h5>\r\n                </CardTitle>\r\n                <CardSubtitle>\r\n                    <p style={{ fontSize: '0.85em' }}>Made {hub.date}</p>\r\n                </CardSubtitle>\r\n            </CardHeader>\r\n            <CardBody style={{ backgroundColor: '#a2ffaf' }}>\r\n                <CardText>{hub.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useTransition, animated } from 'react-spring';\r\nimport { CardColumns } from 'reactstrap';\r\nimport Row from './Row';\r\n\r\nexport default function HubList({ hubs }) {\r\n    const transitions = useTransition(hubs, hub => hub.id, {\r\n        from: {\r\n            transform: 'translate3D(0px, 100px, 0px)',\r\n        },\r\n        enter: {\r\n            transform: 'translate3D(0px, 0px, 0px',\r\n        },\r\n    });\r\n\r\n    return (\r\n        <CardColumns>\r\n            {transitions.map(({ item, key, props }) => (\r\n                <animated.div style={props} key={key}>\r\n                    <Row hub={item} />\r\n                </animated.div>\r\n            ))}\r\n        </CardColumns>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport { Form, Label } from 'reactstrap';\r\n\r\nexport default function Search({ setSearch, type, setCurrentPage }) {\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        setSearch(data.search);\r\n        //Set the current page to avoid errors if the pages count is less than the current page\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            style={{ padding: '20px 2rem', paddingBottom: '0px' }}\r\n        >\r\n            <Label for=\"search\">Find specific {type}</Label>\r\n            <input\r\n                className=\"form-control\"\r\n                placeholder=\"What do you want to search for?\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                ref={register}\r\n                style={{ marginBottom: '15px' }}\r\n            />\r\n            <input className=\"btn btn-primary\" value=\"Search\" type=\"submit\" />\r\n        </Form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { animated, useSpring, config } from 'react-spring';\r\nimport '../../style/hub.css';\r\n\r\nexport default function ToggleButton({ type, handleTypeChange }) {\r\n    const { x, color } = useSpring({\r\n        x: type !== 'hubs' ? 100 : 0,\r\n        color: type !== 'hubs' ? 'white' : 'black',\r\n        config: { ...config.molasses, friction: 60 },\r\n    });\r\n\r\n    return (\r\n        <Button\r\n            color=\"primary\"\r\n            className=\"lead type-toggle-button\"\r\n            onClick={handleTypeChange}\r\n            style={{\r\n                borderColor: type === 'hubs' && '#86eb93',\r\n            }}\r\n        >\r\n            <animated.span style={{ color }} className=\"type-toggle-span\">\r\n                {type.charAt(0).toUpperCase() + type.slice(1)}\r\n            </animated.span>\r\n            <animated.div\r\n                className=\"type-toggle-div\"\r\n                style={{\r\n                    transform: x.interpolate(x => `translateX(-${x}%)`),\r\n                }}\r\n            />\r\n        </Button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Jumbotron, Spinner } from 'reactstrap';\r\nimport PostList from '../Post/List';\r\nimport HubList from './HubList';\r\nimport Paginate from '../Pagination';\r\nimport Search from '../General/Search';\r\nimport Dropdown from '../General/Dropdown';\r\nimport ToggleButton from './ToggleButton';\r\nimport '../../style/hub.css';\r\n\r\nexport default function Category() {\r\n    const [hub, setHub] = useState(useLocation().state?.hub);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n    const [items, setItems] = useState({});\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [type, setType] = useState('posts');\r\n    const [search, setSearch] = useState('');\r\n    const { title } = useParams();\r\n\r\n    useEffect(() => {\r\n        if (hub) return () => {};\r\n        const getHub = async () => {\r\n            const response = await fetch(`knowledge/hub/details/${title}`);\r\n            const result = await response.json();\r\n            setHub(result);\r\n        };\r\n        getHub();\r\n    }, [title, hub]);\r\n\r\n    //Get items for given category and skip if category isn't ready\r\n    useEffect(() => {\r\n        setItems({});\r\n        if (!hub) return () => {};\r\n        const getItems = async () => {\r\n            const response = await fetch(\r\n                `knowledge/hub/items/${hub.id}?sort=${sortBy[0]}&page=${currentPage}&type=${type}&search=${search}`\r\n            );\r\n            const result = await response.json();\r\n            setItems(result);\r\n            console.log(result);\r\n        };\r\n        getItems();\r\n    }, [hub, currentPage, type, search, sortBy]);\r\n\r\n    const handleTypeChange = () => {\r\n        setType(type === 'posts' ? 'hubs' : 'posts');\r\n        //Set the sort by to newest to avoid invalid sort by in the hubs\r\n        setSortBy(['-date', 'Newest']);\r\n        //Set the current page to avoid errors if the pages count is less than the current page\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n    ];\r\n    //Posts only sort by options\r\n    if (type === 'posts')\r\n        options.push(['-likes', 'Most Liked'], ['likes', 'Least liked']);\r\n\r\n    return !hub ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <Jumbotron>\r\n                <h2 className=\"display-3 hub-name\">{title}</h2>\r\n                <p className=\"lead\">{hub.description}</p>\r\n                <hr className=\"my-2\" />\r\n                <ToggleButton type={type} handleTypeChange={handleTypeChange} />\r\n            </Jumbotron>\r\n            <Search\r\n                setSearch={setSearch}\r\n                type={type}\r\n                setCurrentPage={setCurrentPage}\r\n            />\r\n            <Dropdown\r\n                options={options}\r\n                setSortBy={setSortBy}\r\n                selected={sortBy[1]}\r\n            />\r\n            {items.results ? (\r\n                type === 'posts' ? (\r\n                    <>\r\n                        <PostList posts={items.results} />\r\n                        <Paginate\r\n                            currentPage={currentPage}\r\n                            last={items.total}\r\n                            setCurrentPage={setCurrentPage}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <HubList hubs={items.results} />\r\n                )\r\n            ) : (\r\n                <Spinner color=\"primary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Redirect, Route } from 'react-router-dom';\nimport Register from './components/Auth/Register';\nimport Login from './components/Auth/Login';\nimport Sidebar from './components/General/Navbar';\nimport Post from './components/Post/Post';\nimport PostForm from './components/Post/New';\nimport Home from './components/Home';\nimport Hub from './components/Hub/Hub';\nimport { LoggedinProvider } from './components/Auth/LoggedInContext';\nimport { ToggleLoggedinProvider } from './components/Auth/ToggleLoginContext';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nexport default function App() {\n    const [loggedIn, setLoggedIn] = useState(undefined);\n\n    useEffect(() => {\n        if (loggedIn !== undefined) return () => {};\n        const getUser = async () => {\n            const response = await fetch('/knowledge/login');\n            const { user } = await response.json();\n            setLoggedIn(user);\n        };\n        getUser();\n    }, [loggedIn]);\n\n    return (\n        <Router>\n            <LoggedinProvider value={loggedIn}>\n                <ToggleLoggedinProvider value={setLoggedIn}>\n                    <Sidebar>\n                        <div className=\"App\" style={{ marginTop: '65px' }}>\n                            <Route path=\"/\" exact component={Home} />\n                            <Route\n                                path=\"/register\"\n                                exact\n                                component={() =>\n                                    loggedIn ? (\n                                        <Redirect to=\"/\" />\n                                    ) : (\n                                        <Register />\n                                    )\n                                }\n                            />\n                            <Route\n                                path=\"/login\"\n                                exact\n                                component={() =>\n                                    loggedIn ? <Redirect to=\"/\" /> : <Login />\n                                }\n                            />\n                            <Route\n                                path=\"/new/post\"\n                                exact\n                                component={() =>\n                                    loggedIn ? (\n                                        <PostForm />\n                                    ) : (\n                                        <Redirect to=\"/login\" />\n                                    )\n                                }\n                            />\n                            <Route path=\"/posts/:uuid\" exact component={Post} />\n                            <Route path=\"/hubs/:title\" exact component={Hub} />\n                        </div>\n                    </Sidebar>\n                </ToggleLoggedinProvider>\n            </LoggedinProvider>\n        </Router>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_share_online_r87b.fbd5ff07.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_Login_re_4vu2.303e4a67.svg\";"],"sourceRoot":""}