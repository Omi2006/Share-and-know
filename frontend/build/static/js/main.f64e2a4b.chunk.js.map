{"version":3,"sources":["components/Auth/fetchCsrf.js","components/Auth/ToggleLoginContext.js","components/Auth/Register.js","components/Auth/Login.js","components/Auth/LoggedInContext.js","components/General/SidebarContent.js","components/General/Navbar.js","components/Comment/Comment.js","components/Comment/List.js","components/Comment/New.js","components/Post/Like.js","components/Post/Post.js","components/Post/New.js","components/Post/Row.js","components/Post/List.js","components/Pagination.js","components/General/Dropdown.js","components/Home.js","components/General/Search.js","components/Category.js","App.js","serviceWorker.js","index.js","images/undraw_share_online_r87b.svg","images/undraw_Login_re_4vu2.svg"],"names":["getCookie","name","document","cookie","token","split","map","c","trim","filter","startsWith","length","decodeURIComponent","fetchCsrf","url","body","method","a","fetch","mode","credentials","headers","Accept","JSON","stringify","response","json","result","ToggleLoggedinContext","React","createContext","ToggleLoggedinProvider","Provider","Register","useForm","handleSubmit","errors","register","watch","handleLogin","useContext","submitButton","useRef","useState","message","setMessage","onSubmit","data","current","disabled","username","password","confirm","email","type","content","Object","keys","Row","style","margin","Col","md","src","ShareImage","alt","width","padding","UncontrolledAlert","color","toggle","maxWidth","placeholder","ref","required","className","aria-label","marginTop","marginBottom","validate","value","Login","submitInput","height","loginImage","minWidth","to","LoggedinContext","LoggedinProvider","SidebarContent","loggedIn","LoggedInContext","logout","alert","Nav","vertical","NavItem","icon","faHome","faPlus","onClick","faSignOutAlt","faSignInAlt","faUser","SidebarNav","props","collapsed","setCollapsed","localStorage","getItem","theme","setTheme","useEffect","setItem","documentElement","setAttribute","sidebar","open","onSetOpen","styles","backgroundColor","zIndex","overlay","faBars","faSun","faMoon","children","Comment","comment","editCommentContent","setContent","editing","setEditing","editComment","id","Card","CardHeader","display","justifyContent","commenter","CardText","date","Button","fontSize","outline","title","faWindowClose","marginLeft","faSave","faEdit","CardBody","maxLength","whiteSpcae","List","comments","transition","useTransition","from","opacity","transform","enter","config","wobbly","item","key","div","overflow","New","reset","formData","post","setComments","prevComments","error","console","log","Alert","Form","FormGroup","Label","for","LikeButton","usernames","likes","user","handleLike","uuid","setLikes","faHeart","includes","Badge","pill","Post","useParams","setPost","getPost","poster","pathname","category","state","Spinner","PostForm","push","useHistory","href","target","rel","rows","lg","xl","CardTitle","CardSubtitle","CardFooter","faArrowCircleRight","AnimatedDeck","animated","CardDeck","PostList","posts","useSpring","Paginate","Pagination","PaginationItem","currentPage","PaginationLink","previous","setCurrentPage","Set","last","number","active","toString","next","Radio","options","setSortBy","selected","isToggled","setToggle","menubg","background","y","menuAppear","immediate","position","button","p","interpolate","option","setTimeout","handleSetOption","Home","setPosts","sortBy","getPosts","textAlign","results","total","Search","setSearch","search","Category","useLocation","setCategory","items","setItems","setType","getCategory","getItems","charAt","toUpperCase","slice","App","undefined","setLoggedIn","getUser","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.f64e2a4b.chunk.js","sourcesContent":["function getCookie(name) {\r\n    if (!document.cookie) {\r\n        return null;\r\n    }\r\n    const token = document.cookie\r\n        .split(\";\")\r\n        .map(c => c.trim())\r\n        .filter(c => c.startsWith(name + \"=\"));\r\n\r\n    if (token.length === 0) {\r\n        return null;\r\n    }\r\n    return decodeURIComponent(token[0].split(\"=\")[1]);\r\n}\r\n\r\nexport async function fetchCsrf(url, body, method) {\r\n    const response = await fetch(url, {\r\n        method: method,\r\n        mode: \"same-origin\",\r\n        credentials: \"include\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n","import React from 'react';\r\n\r\nconst ToggleLoggedinContext = React.createContext({});\r\nexport const ToggleLoggedinProvider = ToggleLoggedinContext.Provider;\r\n\r\nexport default ToggleLoggedinContext;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { useForm } from 'react-hook-form';\r\nimport ToggleLoggedinContext from './ToggleLoginContext';\r\nimport { Col, UncontrolledAlert, Row } from 'reactstrap';\r\n\r\nimport ShareImage from '../../images/undraw_share_online_r87b.svg';\r\nimport '../../style/auth.css';\r\n\r\nexport default function Register() {\r\n    const { handleSubmit, errors, register, watch } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n    const submitButton = useRef();\r\n    const [message, setMessage] = useState({});\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        if (\r\n            data.username.length <= 0 ||\r\n            data.password.length <= 0 ||\r\n            data.confirm.length <= 0 ||\r\n            data.email.length <= 0\r\n        ) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            return false;\r\n        } else if (data.password !== data.confirm) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'Password and confirm fields must match!',\r\n            });\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/register', data, 'POST');\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px' }}>\r\n            <Col md=\"12\">\r\n                <h4>Welcome! Register to interact with other users.</h4>\r\n                <img\r\n                    src={ShareImage}\r\n                    alt=\"Share online\"\r\n                    style={{ width: '40vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    style={{\r\n                        padding: '10px',\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                    }}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"form-control input\"\r\n                        name=\"email\"\r\n                        aria-label=\"email\"\r\n                        ref={register({ required: true })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.email && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the email!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value === watch('confirm'),\r\n                        })}\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            {errors.password.type === 'required'\r\n                                ? 'Remember to fill out the password!'\r\n                                : 'Password and confirm fields must match!'}\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        className=\"form-control input\"\r\n                        name=\"confirm\"\r\n                        ref={register({ required: true })}\r\n                        aria-label=\"confirm\"\r\n                        style={{ marginTop: '10px', marginBottom: '10px' }}\r\n                    />\r\n                    {errors.confirm && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the confirm password!\r\n                        </p>\r\n                    )}\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Register\"\r\n                        aria-label=\"register\"\r\n                        ref={submitButton}\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useState, useContext, useRef } from 'react';\r\nimport { fetchCsrf } from './fetchCsrf';\r\nimport { Link } from 'react-router-dom';\r\nimport { UncontrolledAlert, Row, Col } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport loginImage from '../../images/undraw_Login_re_4vu2.svg';\r\nimport ToggleLoggedinContext from './ToggleLoginContext';\r\n\r\nexport default function Login() {\r\n    const [message, setMessage] = useState({});\r\n    const submitInput = useRef();\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n\r\n    const onSubmit = async data => {\r\n        submitInput.current.disabled = true;\r\n        if (data.username.length <= 0 || data.password.length <= 0) {\r\n            setMessage({ type: 'danger', content: 'Fill out all fields!' });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        const result = await fetchCsrf('/knowledge/login', data, 'POST');\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            submitInput.current.disabled = false;\r\n            return false;\r\n        }\r\n        submitInput.current.disabled = false;\r\n        handleLogin(result.username);\r\n    };\r\n\r\n    return (\r\n        <Row style={{ margin: '15px', height: '100%' }}>\r\n            <Col md=\"12\">\r\n                <h4>\r\n                    Welcome back! Login to start interacting with other users\r\n                </h4>\r\n                <img\r\n                    src={loginImage}\r\n                    alt=\"login\"\r\n                    style={{ width: '50vw', padding: '20px' }}\r\n                />\r\n            </Col>\r\n            <Col md=\"12\">\r\n                {message.content && (\r\n                    <UncontrolledAlert\r\n                        color={message.type}\r\n                        toggle={() => setMessage({})}\r\n                    >\r\n                        {message.content}\r\n                    </UncontrolledAlert>\r\n                )}\r\n                <form\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    style={{\r\n                        margin: 'auto',\r\n                        maxWidth: '320px',\r\n                        minWidth: '0px',\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"username\"\r\n                        aria-label=\"username\"\r\n                    />\r\n                    {errors.username && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the username!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        ref={register({ required: true })}\r\n                        className=\"form-control input\"\r\n                        name=\"password\"\r\n                        aria-label=\"password\"\r\n                    />\r\n                    {errors.password && (\r\n                        <p className=\"error-message\">\r\n                            Remember to fill out the password!\r\n                        </p>\r\n                    )}\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Login\"\r\n                        ref={submitInput}\r\n                        aria-label=\"login\"\r\n                        className=\"btn btn-primary\"\r\n                    />\r\n                    <footer>\r\n                        <small>\r\n                            Don't have an account? Register{' '}\r\n                            <Link to=\"/register\">here</Link>\r\n                        </small>\r\n                    </footer>\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst LoggedinContext = React.createContext({});\r\nexport const LoggedinProvider = LoggedinContext.Provider;\r\n\r\nexport default LoggedinContext;\r\n","import React, { useContext } from 'react';\r\nimport LoggedInContext from '../Auth/LoggedInContext';\r\nimport { Nav, NavItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../../style/navbar.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHome,\r\n    faPlus,\r\n    faSignInAlt,\r\n    faSignOutAlt,\r\n    faUser,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ToggleLoggedinContext from '../Auth/ToggleLoginContext';\r\n\r\nexport default function SidebarContent() {\r\n    const loggedIn = useContext(LoggedInContext);\r\n    const handleLogin = useContext(ToggleLoggedinContext);\r\n\r\n    const logout = async () => {\r\n        const response = await fetch('/knowledge/logout');\r\n        const result = await response.json();\r\n        if (result.errors) {\r\n            alert('An error has occured');\r\n            return;\r\n        }\r\n        handleLogin(null);\r\n    };\r\n\r\n    return (\r\n        <Nav vertical className=\"navnav\">\r\n            <h3>Share</h3>\r\n            <hr />\r\n            <NavItem>\r\n                <Link to=\"/\" className=\"nav-link navnavlink\">\r\n                    <FontAwesomeIcon icon={faHome} className=\"navnavitem\" />\r\n                    <p className=\"navnavtext\">Home</p>\r\n                </Link>\r\n            </NavItem>\r\n            {loggedIn ? (\r\n                <>\r\n                    <NavItem>\r\n                        <Link to=\"/new/post\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faPlus}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">New post</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <button\r\n                            onClick={logout}\r\n                            className=\"navnavbutton navnavlink\"\r\n                            style={{ margin: '0px', width: '140.547px' }}\r\n                        >\r\n                            <FontAwesomeIcon\r\n                                icon={faSignOutAlt}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Logout</p>\r\n                        </button>\r\n                    </NavItem>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <NavItem>\r\n                        <Link to=\"/login\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faSignInAlt}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Login</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <Link to=\"/register\" className=\"nav-link navnavlink\">\r\n                            <FontAwesomeIcon\r\n                                icon={faUser}\r\n                                className=\"navnavitem\"\r\n                            />\r\n                            <p className=\"navnavtext\">Register</p>\r\n                        </Link>\r\n                    </NavItem>\r\n                </>\r\n            )}\r\n        </Nav>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Sidebar from 'react-sidebar';\r\nimport SideBarContent from './SidebarContent';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './../../style/navbar.css';\r\n\r\nexport default function SidebarNav(props) {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [theme, setTheme] = useState(localStorage.getItem('theme'));\r\n\r\n    const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', theme);\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n    }, [theme]);\r\n\r\n    return (\r\n        <Sidebar\r\n            sidebar={<SideBarContent />}\r\n            open={!collapsed}\r\n            onSetOpen={toggleNavbar}\r\n            styles={{\r\n                sidebar: { backgroundColor: '#93eddc', zIndex: '101' },\r\n                overlay: { backgroundColor: 'rgb(0, 0, 0, 0)' },\r\n                content: !collapsed ? { filter: 'blur(1.5px)' } : {},\r\n            }}\r\n        >\r\n            <div className=\"navnavbar\">\r\n                <button\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={() => setCollapsed(false)}\r\n                    className=\"navnavbutton\"\r\n                >\r\n                    <FontAwesomeIcon icon={faBars} />\r\n                </button>\r\n                <button\r\n                    className=\"theme navnavbutton\"\r\n                    style={{ padding: '0px ' }}\r\n                    onClick={() =>\r\n                        setTheme(theme === 'dark' ? 'light' : 'dark')\r\n                    }\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"theme\"\r\n                        icon={theme === 'dark' ? faSun : faMoon}\r\n                    />\r\n                </button>\r\n            </div>\r\n            {props.children}\r\n        </Sidebar>\r\n    );\r\n}\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { Card, CardHeader, CardText, CardBody, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faEdit,\r\n    faSave,\r\n    faWindowClose,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport TextArea from 'react-autosize-textarea';\r\nimport Markdown from 'react-markdown';\r\nimport LoggedinContext from '../Auth/LoggedInContext';\r\nimport '../../style/post.css';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\n\r\nexport default function Comment({ comment }) {\r\n    const loggedIn = useContext(LoggedinContext);\r\n    const editCommentContent = useRef();\r\n    const [content, setContent] = useState(comment.content);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const editComment = async () => {\r\n        if (editCommentContent.current) {\r\n            const { value } = editCommentContent.current;\r\n            if (value.length > 256) {\r\n                alert('Comment must be less than 256 characters long');\r\n                return;\r\n            }\r\n            setContent(value);\r\n            const result = await fetchCsrf(\r\n                `/knowledge/comment/${comment.id}`,\r\n                { content: value },\r\n                'PUT'\r\n            );\r\n            if (result.errors) {\r\n                alert(result.errors[Object.keys(result.errors)[0]]);\r\n            }\r\n        }\r\n        setEditing(!editing);\r\n    };\r\n    return (\r\n        <Card style={{ margin: '20px', height: 'auto' }}>\r\n            <CardHeader\r\n                style={{\r\n                    backgroundColor: 'rgb(203, 223, 230)',\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <div>\r\n                    <h4>@{comment.commenter.username}</h4>\r\n                    <CardText className=\"text-muted\">{comment.date}</CardText>\r\n                </div>\r\n                {comment.commenter.username === loggedIn && (\r\n                    <div>\r\n                        {editing && (\r\n                            <Button\r\n                                color=\"danger\"\r\n                                style={{ fontSize: '0.9rem' }}\r\n                                outline\r\n                                title=\"Cancel\"\r\n                                onClick={() => setEditing(false)}\r\n                            >\r\n                                <span className=\"visually-hidden\">Cancel</span>\r\n                                <FontAwesomeIcon icon={faWindowClose} />\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            color={editing ? 'success' : 'primary'}\r\n                            style={{ marginLeft: '10px', fontSize: '0.9rem' }}\r\n                            outline\r\n                            title={editing ? 'Save' : 'Edit'}\r\n                            disabled={\r\n                                editCommentContent.current &&\r\n                                editCommentContent.current.length < 1\r\n                            }\r\n                            onClick={() => editComment()}\r\n                        >\r\n                            <span className=\"visually-hidden\">\r\n                                {editing ? 'save' : 'edit'}\r\n                            </span>\r\n                            <FontAwesomeIcon icon={editing ? faSave : faEdit} />\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </CardHeader>\r\n            <CardBody style={{ backgroundColor: 'rgb(215, 245, 255)' }}>\r\n                {editing ? (\r\n                    <TextArea\r\n                        className=\"edit-comment\"\r\n                        ref={editCommentContent}\r\n                        maxLength=\"256\"\r\n                    >\r\n                        {content}\r\n                    </TextArea>\r\n                ) : (\r\n                    <Markdown\r\n                        style={{\r\n                            whiteSpcae: 'preWrap',\r\n                            marginTop: '0px',\r\n                            marginBottom: '1rem',\r\n                        }}\r\n                    >\r\n                        {content}\r\n                    </Markdown>\r\n                )}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\nimport { useTransition, animated, config } from 'react-spring';\r\n\r\nexport default function List({ comments }) {\r\n    const transition = useTransition(comments, comment => comment.id, {\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translateX(-100px)',\r\n        },\r\n        enter: { opacity: 1, transform: 'translateX(0px)' },\r\n        config: config.wobbly,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {transition.map(({ item, key, props }) => (\r\n                <animated.div\r\n                    style={{ ...props, overflow: 'hidden' }}\r\n                    key={key}\r\n                >\r\n                    <Comment comment={item} />\r\n                </animated.div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Form, FormGroup, Label, UncontrolledAlert, Alert } from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function New(props) {\r\n    const { register, handleSubmit, reset, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const submitButton = useRef();\r\n\r\n    const onSubmit = async data => {\r\n        //Disable button to prevent submitting twice\r\n        submitButton.current.disabled = true;\r\n\r\n        if (data.content.length < 1) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: 'You must fill out the comment!',\r\n            });\r\n            submitButton.current.disabled = false;\r\n            return;\r\n        }\r\n        const formData = {\r\n            content: data.content,\r\n            post: props.post,\r\n        };\r\n        const result = await fetchCsrf('/knowledge/comment', formData, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n        } else {\r\n            setMessage({\r\n                type: 'success',\r\n                content: 'Comment posted successfully.',\r\n            });\r\n            reset();\r\n        }\r\n        submitButton.current.disabled = false;\r\n        //Add comment to comment lists\r\n        try {\r\n            props.setComments(prevComments => [\r\n                result.comment,\r\n                ...prevComments,\r\n            ]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            {errors.content && (\r\n                <UncontrolledAlert color=\"danger\">\r\n                    {errors.content.type === 'required'\r\n                        ? 'You must fill out the comment!'\r\n                        : 'Comment must be under 257 characters!'}\r\n                </UncontrolledAlert>\r\n            )}\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content</Label>\r\n                    <TextArea\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 257,\r\n                        })}\r\n                        placeholder=\"A valuable comment...\"\r\n                        id=\"content\"\r\n                        name=\"content\"\r\n                        aria-label=\"Comment content\"\r\n                        className=\"form-control\"\r\n                    />\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Share your comment\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport { Badge } from 'reactstrap';\r\nimport LoggedinContext from '../Auth/LoggedInContext';\r\nimport '../../style/post.css';\r\n\r\nexport default function LikeButton(props) {\r\n    const loggedIn = useContext(LoggedinContext);\r\n    const usernames = props.likes.map(user => user.username);\r\n\r\n    const handleLike = async () => {\r\n        const result = await fetchCsrf(\r\n            `knowledge/post/${props.uuid}`,\r\n            {},\r\n            'PUT'\r\n        );\r\n        if (result.errors) {\r\n            alert('An error has occured. Try again later.');\r\n        } else {\r\n            props.setLikes(result.likes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn && (\r\n                <button onClick={handleLike} className=\"like-button\">\r\n                    <FontAwesomeIcon\r\n                        icon={faHeart}\r\n                        title=\"like button\"\r\n                        className={\r\n                            usernames.includes(loggedIn)\r\n                                ? 'dislike-icon'\r\n                                : 'like-icon'\r\n                        }\r\n                    />\r\n                    <span className=\"visually-hidden\">\r\n                        {usernames.includes(loggedIn) ? 'Like' : 'Dislike'}\r\n                        the post\r\n                    </span>\r\n                </button>\r\n            )}\r\n            <Badge pill color=\"info\">\r\n                {props.likes.length}\r\n            </Badge>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Alert, Badge, Spinner } from 'reactstrap';\r\nimport Markdown from 'react-markdown';\r\nimport CommentList from '../Comment/List';\r\nimport CommentForm from '../Comment/New';\r\nimport LoggedInContext from '../Auth/LoggedInContext';\r\nimport LikeButton from './Like';\r\n\r\nimport '../../style/post.css';\r\n\r\nexport default function Post() {\r\n    const { uuid } = useParams();\r\n    const [post, setPost] = useState({});\r\n    const [likes, setLikes] = useState();\r\n    const [comments, setComments] = useState(post.comments);\r\n    const loggedIn = useContext(LoggedInContext);\r\n\r\n    useEffect(() => {\r\n        //get the post and set the comments\r\n        const getPost = async () => {\r\n            const response = await fetch(`knowledge/post/${uuid}`);\r\n            const result = await response.json();\r\n            setPost(result);\r\n            setLikes(result.likes);\r\n            setComments(result.comments);\r\n        };\r\n        getPost();\r\n    }, [uuid]);\r\n\r\n    return !post.content ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ padding: '10px' }}>\r\n            <div>\r\n                <h4>{post.poster.username}</h4>\r\n                <Link\r\n                    to={{\r\n                        pathname: `/category/${post.category.title}`,\r\n                        state: { id: post.category.id },\r\n                    }}\r\n                >\r\n                    <Badge color=\"primary\">{post.category.title}</Badge>\r\n                </Link>\r\n                {likes && (\r\n                    <LikeButton\r\n                        setLikes={setLikes}\r\n                        likes={likes}\r\n                        uuid={post.uuid}\r\n                    />\r\n                )}\r\n                <footer style={{ fontSize: '12px' }}>{post.date}</footer>\r\n                <h2 id=\"post-title\">{post.title}</h2>\r\n            </div>\r\n            <hr />\r\n            <div style={{ maxWidth: '1024px', margin: 'auto' }}>\r\n                <div id=\"post-div\">\r\n                    <Markdown>{post.content}</Markdown>\r\n                </div>\r\n                <hr />\r\n                {loggedIn ? (\r\n                    <CommentForm post={post.id} setComments={setComments} />\r\n                ) : (\r\n                    <Alert color=\"danger\">\r\n                        You must be logged in to comment!\r\n                    </Alert>\r\n                )}\r\n                <hr />\r\n                {comments && <CommentList comments={comments} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FormGroup, Form, Label, Alert } from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchCsrf } from '../Auth/fetchCsrf';\r\nimport TextArea from 'react-autosize-textarea';\r\n\r\nexport default function PostForm() {\r\n    const submitButton = useRef();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [message, setMessage] = useState({});\r\n    const { push } = useHistory();\r\n\r\n    const onSubmit = async data => {\r\n        submitButton.current.disabled = true;\r\n        const result = await fetchCsrf('/knowledge/new/post', data, 'POST');\r\n        //Check for server errors\r\n        if (result.errors) {\r\n            submitButton.current.disabled = false;\r\n            setMessage({\r\n                type: 'danger',\r\n                content: result.errors[Object.keys(result.errors)[0]],\r\n            });\r\n            return false;\r\n        }\r\n        submitButton.current.disabled = true;\r\n        push('/');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {message.content && (\r\n                <Alert color={message.type} toggle={() => setMessage({})}>\r\n                    {message.content}\r\n                </Alert>\r\n            )}\r\n            <Form\r\n                style={{ margin: '10px' }}\r\n                method=\"POST\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n                <h6>\r\n                    In here you make a new post. The content will be rendered\r\n                    using markdown.{' '}\r\n                    <a\r\n                        href=\"https://www.markdowntutorial.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        What is markdown and how to use it.\r\n                    </a>\r\n                </h6>\r\n                <FormGroup>\r\n                    <Label for=\"title\">Title: </Label>\r\n                    <input\r\n                        type=\"text\"\r\n                        aria-label=\"title\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Title...\"\r\n                        className=\"form-control\"\r\n                        ref={register({\r\n                            required: true,\r\n                            validate: value => value.length < 65,\r\n                        })}\r\n                    />\r\n                    {errors.title && (\r\n                        <p className=\"error-message\">\r\n                            {errors.title.type === 'required'\r\n                                ? 'You must provide a title!'\r\n                                : 'Title must be 64 characters at most!'}\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"content\">Content: </Label>\r\n                    <TextArea\r\n                        type=\"text\"\r\n                        aria-label=\"content\"\r\n                        name=\"content\"\r\n                        id=\"content\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Some good content...\"\r\n                        ref={register({ required: true })}\r\n                        rows={20}\r\n                        maxLength=\"2050\"\r\n                    />\r\n                    {errors.content && (\r\n                        <p className=\"error-message\">\r\n                            You must provide some content!\r\n                        </p>\r\n                    )}\r\n                </FormGroup>\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Create post\"\r\n                    className=\"btn btn-primary\"\r\n                    ref={submitButton}\r\n                />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    CardSubtitle,\r\n    Col,\r\n    CardHeader,\r\n    CardFooter,\r\n    Spinner,\r\n} from 'reactstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../style/post.css';\r\n\r\nexport default function Row({ post }) {\r\n    const { push } = useHistory();\r\n\r\n    return !post ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <Col lg=\"6\" xl=\"4\" style={{ marginBottom: '30px' }}>\r\n            <Card\r\n                className=\"post-card\"\r\n                onClick={() => push(`/posts/${post.uuid}`)}\r\n                title=\"See more\"\r\n            >\r\n                <CardHeader style={{ backgroundColor: '#68d8ee' }}>\r\n                    <CardTitle>\r\n                        <h5>{post.title}</h5>\r\n                    </CardTitle>\r\n                    <CardSubtitle>By: {post.poster.username}</CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody className=\"back-blue\">\r\n                    <CardText className=\"post-content\">{post.content}</CardText>\r\n                </CardBody>\r\n                <CardFooter className=\"footer back-blue\">\r\n                    <p className=\"card-link\">\r\n                        <Link to={`/posts/${post.uuid}`} aria-label=\"see more\">\r\n                            <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                            <span className=\"visually-hidden\">See more</span>\r\n                        </Link>\r\n                    </p>\r\n                    <CardText className=\"text-muted\">{post.date}</CardText>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from './Row';\r\nimport { CardDeck } from 'reactstrap';\r\nimport { animated, useSpring } from 'react-spring';\r\n\r\nconst AnimatedDeck = animated(CardDeck);\r\n\r\nexport default function PostList({ posts }) {\r\n    const styles = useSpring({\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translateX(100px)',\r\n        },\r\n        to: {\r\n            opacity: 1,\r\n            transform: 'translateX(0px)',\r\n        },\r\n    });\r\n\r\n    return (\r\n        <AnimatedDeck style={styles} className=\"post-list\">\r\n            {posts.map(post => {\r\n                return <Row post={post} key={post.id} />;\r\n            })}\r\n        </AnimatedDeck>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PaginationItem, PaginationLink, Pagination } from 'reactstrap';\r\n\r\nexport default function Paginate(props) {\r\n    return (\r\n        <Pagination style={{ justifyContent: 'center' }}>\r\n            {/* Make sure current page isn't the first to disable it */}\r\n            <PaginationItem disabled={props.currentPage === 1} key=\"prev\">\r\n                <PaginationLink\r\n                    previous\r\n                    onClick={() => props.setCurrentPage(props.currentPage - 1)}\r\n                />\r\n            </PaginationItem>\r\n\r\n            {[...new Set([1, props.currentPage, props.last])].map(number => {\r\n                return (\r\n                    <PaginationItem\r\n                        active={number === props.currentPage}\r\n                        key={number.toString()}\r\n                    >\r\n                        <PaginationLink\r\n                            onClick={() => props.setCurrentPage(number)}\r\n                        >\r\n                            {number}\r\n                        </PaginationLink>\r\n                    </PaginationItem>\r\n                );\r\n            })}\r\n            {/* Make sure current page isn't the last to disable it */}\r\n            <PaginationItem\r\n                disabled={props.currentPage === props.last}\r\n                key=\"next\"\r\n            >\r\n                <PaginationLink\r\n                    next\r\n                    onClick={() => props.setCurrentPage(props.currentPage + 1)}\r\n                />\r\n            </PaginationItem>\r\n        </Pagination>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSpring, animated, config } from 'react-spring';\r\n\r\nimport '../../style/dropdown.css';\r\n\r\nexport default function Radio({ options, setSortBy, selected }) {\r\n    const [isToggled, setToggle] = useState(false);\r\n    const menubg = useSpring({ background: isToggled ? '#68d8ee' : '#8ee4f5' });\r\n    const { y } = useSpring({\r\n        y: isToggled ? 180 : 0,\r\n    });\r\n    const menuAppear = useSpring({\r\n        transform: isToggled\r\n            ? 'translate3D(0,0,0)'\r\n            : 'translate3D(0,-40px,50px)',\r\n        opacity: isToggled ? 1 : 0,\r\n        zIndex: 2,\r\n        immediate: key => key === 'zIndex',\r\n    });\r\n\r\n    const handleSetOption = option => {\r\n        //Wait for items to disappear before toggle\r\n        setTimeout(() => setToggle(false), 0.01);\r\n        setSortBy(option);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: 'relative',\r\n                width: '250px',\r\n                margin: '0 auto',\r\n            }}\r\n        >\r\n            <animated.button\r\n                style={menubg}\r\n                className=\"radiowrapper\"\r\n                onClick={() => setToggle(!isToggled)}\r\n            >\r\n                <div className=\"radio\">\r\n                    <p>{selected}</p>\r\n                    <animated.p\r\n                        style={{\r\n                            transform: y.interpolate(y => `rotateX(${y}deg)`),\r\n                        }}\r\n                    >\r\n                        {isToggled ? 'X' : '▼'}\r\n                    </animated.p>\r\n                </div>\r\n            </animated.button>\r\n            <animated.div style={menuAppear} config={config.wobbly}>\r\n                {isToggled && (\r\n                    <div className=\"radiocontent\">\r\n                        {options.map(option => (\r\n                            <div onClick={() => handleSetOption(option)}>\r\n                                <button>{option[1]}</button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport PostList from './Post/List';\r\nimport { Spinner } from 'reactstrap';\r\nimport Paginate from './Pagination';\r\nimport Dropdown from './General/Dropdown';\r\n\r\nexport default function Home() {\r\n    const [posts, setPosts] = useState(null);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n\r\n    //get the posts for a page\r\n\r\n    useEffect(() => {\r\n        setPosts({});\r\n        const getPosts = async () => {\r\n            const response = await fetch(\r\n                `knowledge/category/items/1?page=${currentPage}&sort=${sortBy[0]}&type=posts&search=`\r\n            );\r\n            const result = await response.json();\r\n            setPosts(result);\r\n        };\r\n        getPosts();\r\n    }, [currentPage, sortBy]);\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n        ['-likes', 'Most Liked'],\r\n        ['likes', 'Least liked'],\r\n    ];\r\n\r\n    return posts === null ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <h3 style={{ textAlign: 'center' }}>Home</h3>\r\n            <Dropdown\r\n                options={options}\r\n                setSortBy={setSortBy}\r\n                selected={sortBy[1]}\r\n            />\r\n            {posts.results ? (\r\n                <>\r\n                    <PostList posts={posts.results} />\r\n                    <Paginate\r\n                        currentPage={currentPage}\r\n                        last={posts.total}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <Spinner color=\"primary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport '../../style/auth.css';\r\nimport { Form, Label } from 'reactstrap';\r\n\r\nexport default function Search({ setSearch, type }) {\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        setSearch(data.search);\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Label for=\"search\">Find specific {type}</Label>\r\n            <input\r\n                className=\"form-control\"\r\n                placeholder=\"What do you want to search for?...\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                ref={register}\r\n            />\r\n            <input className=\"btn btn-primary\" value=\"Search\" type=\"submit\" />\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Button, Spinner } from 'reactstrap';\r\nimport PostList from './Post/List';\r\n\r\nimport '../style/category.css';\r\nimport Paginate from './Pagination';\r\nimport Search from './General/Search';\r\nimport Dropdown from './General/Dropdown';\r\n\r\nexport default function Category() {\r\n    const [category, setCategory] = useState(useLocation().state?.id);\r\n    const [sortBy, setSortBy] = useState(['-date', 'Newest']);\r\n    const [items, setItems] = useState({});\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [type, setType] = useState('posts');\r\n    const [search, setSearch] = useState('');\r\n    const { title } = useParams();\r\n\r\n    useEffect(() => {\r\n        if (category) return () => {};\r\n        const getCategory = async () => {\r\n            const response = await fetch(`knowledge/category/details/${title}`);\r\n            const result = await response.json();\r\n            setCategory(result.id);\r\n        };\r\n        getCategory();\r\n    }, [title]);\r\n\r\n    //Get items for given category and skip if category isn't ready\r\n    useEffect(() => {\r\n        setItems({});\r\n        if (!category) return () => {};\r\n        const getItems = async () => {\r\n            const response = await fetch(\r\n                `knowledge/category/items/${category}?sort=${sortBy[0]}&page=${currentPage}&type=${type}&search=${search}`\r\n            );\r\n            const result = await response.json();\r\n            console.log(result);\r\n            setItems(result);\r\n        };\r\n        getItems();\r\n    }, [category, currentPage, type, search, sortBy]);\r\n\r\n    const options = [\r\n        ['-date', 'Newest'],\r\n        ['date', 'Oldest'],\r\n        ['-likes', 'Most Liked'],\r\n        ['likes', 'Least liked'],\r\n    ];\r\n\r\n    return !category ? (\r\n        <Spinner color=\"primary\" />\r\n    ) : (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            <h3 style={{ textAlign: 'center' }}>\r\n                {type.charAt(0).toUpperCase() + type.slice(1)} in category{' '}\r\n                <span className=\"category-name\">{title}</span>\r\n            </h3>\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() =>\r\n                    setType(type === 'posts' ? 'categories' : 'posts')\r\n                }\r\n            >\r\n                {type.charAt(0).toUpperCase() + type.slice(1)}\r\n            </Button>\r\n            <Search setSearch={setSearch} type={type} />\r\n            <Dropdown\r\n                options={options}\r\n                setSortBy={setSortBy}\r\n                selected={sortBy[1]}\r\n            />\r\n            {items.results ? (\r\n                type === 'posts' && (\r\n                    <>\r\n                        <PostList posts={items.results} />\r\n                        <Paginate\r\n                            currentPage={currentPage}\r\n                            last={items.total}\r\n                            setCurrentPage={setCurrentPage}\r\n                        />\r\n                    </>\r\n                )\r\n            ) : (\r\n                <Spinner color=\"primary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Redirect, Route } from 'react-router-dom';\nimport Register from './components/Auth/Register';\nimport Login from './components/Auth/Login';\nimport Sidebar from './components/General/Navbar';\nimport Post from './components/Post/Post';\nimport PostForm from './components/Post/New';\nimport Home from './components/Home';\nimport Category from './components/Category';\nimport { LoggedinProvider } from './components/Auth/LoggedInContext';\nimport { ToggleLoggedinProvider } from './components/Auth/ToggleLoginContext';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nexport default function App() {\n    const [loggedIn, setLoggedIn] = useState(undefined);\n\n    useEffect(() => {\n        if (loggedIn !== undefined) return () => {};\n        const getUser = async () => {\n            const response = await fetch('/knowledge/login');\n            const { user } = await response.json();\n            setLoggedIn(user);\n        };\n        getUser();\n    }, [loggedIn]);\n\n    return (\n        <Router>\n            <LoggedinProvider value={loggedIn}>\n                <ToggleLoggedinProvider value={setLoggedIn}>\n                    <Sidebar>\n                        <div className=\"App\" style={{ marginTop: '65px' }}>\n                            <Route path=\"/\" exact component={Home} />\n                            <Route\n                                path=\"/register\"\n                                exact\n                                component={() =>\n                                    loggedIn ? (\n                                        <Redirect to=\"/\" />\n                                    ) : (\n                                        <Register />\n                                    )\n                                }\n                            />\n                            <Route\n                                path=\"/login\"\n                                exact\n                                component={() =>\n                                    loggedIn ? <Redirect to=\"/\" /> : <Login />\n                                }\n                            />\n                            <Route\n                                path=\"/new/post\"\n                                exact\n                                component={() =>\n                                    loggedIn ? (\n                                        <PostForm />\n                                    ) : (\n                                        <Redirect to=\"/login\" />\n                                    )\n                                }\n                            />\n                            <Route path=\"/posts/:uuid\" exact component={Post} />\n                            <Route\n                                path=\"/category/:title\"\n                                exact\n                                component={Category}\n                            />\n                        </div>\n                    </Sidebar>\n                </ToggleLoggedinProvider>\n            </LoggedinProvider>\n        </Router>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_share_online_r87b.fbd5ff07.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_Login_re_4vu2.303e4a67.svg\";"],"sourceRoot":""}